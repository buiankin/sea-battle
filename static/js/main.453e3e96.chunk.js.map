{"version":3,"sources":["store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["reducer","state","action","type","notes","id","Math","random","toString","substring","title","note","completed","map","filter","Error","App","memo","useReducer","appState","dispatch","useState","setNote","assistantStateRef","useRef","assistantRef","useEffect","getState","current","console","log","process","createAssistant","on","item_selector","items","index","number","className","onSubmit","event","preventDefault","placeholder","value","onChange","target","required","autoFocus","style","fontWeight","textDecorationLine","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPA4BaA,EAAU,SAACC,EAAcC,GACpC,OAAQA,EAAOC,MACb,IAAK,YAYL,IAAK,WACH,OAAO,2BACFF,GADL,IAEEG,MAAM,GAAD,mBACAH,EAAMG,OADN,CAEH,CACEC,GAAIC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GACzCC,MAAOR,EAAOS,KACdC,WAAW,OAKnB,IAAK,YACH,OAAO,2BACFX,GADL,IAEEG,MAAOH,EAAMG,MAAMS,KAAI,SAACF,GAAD,OACrBA,EAAKN,KAAOH,EAAOG,GAAnB,2BAA6BM,GAA7B,IAAmCC,WAAYD,EAAKC,YAAcD,OAIxE,IAAK,cACH,OAAO,2BACFV,GADL,IAEEG,MAAOH,EAAMG,MAAMU,QAAO,qBAAGT,KAAgBH,EAAOG,QAGxD,QACE,MAAM,IAAIU,Q,OCtBHC,EAAUC,gBAAK,WAAO,IAAD,EACHC,qBAAWlB,EAAS,CAAEI,MAAO,KAD1B,mBACzBe,EADyB,KACfC,EADe,OAGRC,mBAAS,IAHD,mBAGzBV,EAHyB,KAGnBW,EAHmB,KAK1BC,EAAoBC,mBACpBC,EAAeD,mBAwBrB,OAtBAE,qBAAU,WAvBgB,IAACC,EAwBzBF,EAAaG,SAxBYD,EAwBkB,kBAAMJ,EAAkBK,SAvBrEC,QAAQC,IAAI,yBACZD,QAAQC,IAAIC,cASLC,YAAgB,CAAEL,cAevBF,EAAaG,QAAQK,GAAG,QAAQ,YAAsB,IAAnB/B,EAAkB,EAAlBA,OAC7BA,GACFkB,EAASlB,QAGZ,IAEHwB,qBAAU,WACRH,EAAkBK,QAAU,CAC1BM,cAAe,CACbC,MAAOhB,EAASf,MAAMS,KAAI,WAAgBuB,GAAhB,MAA2B,CACnDC,OAAQD,EAAQ,EAChB/B,GAFwB,EAAGA,GAG3BK,MAHwB,EAAOA,cAOpC,CAACS,IAGF,uBAAMmB,UAAU,YAAhB,UACE,sBACEC,SAAU,SAACC,GACTA,EAAMC,iBACNrB,EAAS,CAAEjB,KAAM,WAAYQ,SAC7BW,EAAQ,KAJZ,SAOE,uBACEgB,UAAU,WACVnC,KAAK,OACLuC,YAAY,WACZC,MAAOhC,EACPiC,SAAU,gBAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2BrB,EAAQqB,IAC7CG,UAAQ,EACRC,WAAS,MAGb,oBAAIT,UAAU,QAAd,SACGnB,EAASf,MAAMS,KAAI,SAACF,EAAMyB,GAAP,OAClB,qBAAIE,UAAU,OAAd,UACE,iCACE,uBAAMU,MAAO,CAAEC,WAAY,QAA3B,UAAsCb,EAAQ,EAA9C,QACA,sBACEY,MAAO,CACLE,mBAAoBvC,EAAKC,UAAY,eAAiB,QAF1D,SAKGD,EAAKD,WAGV,uBACE4B,UAAU,YACVnC,KAAK,WACLgD,QAASxC,EAAKC,UACdgC,SAAU,kBAAMxB,EAAS,CAAEjB,KAAM,YAAaE,GAAIM,EAAKN,UAfjCM,EAAKN,eCrF1B+C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.453e3e96.chunk.js","sourcesContent":["type Note = {\n  id: string;\n  title: string;\n  completed: boolean;\n};\n\ntype State = {\n  notes: Array<Note>;\n};\n\ntype Action =\n  | {\n    type: \"lets_fire\";\n    note: string;\n  }\n  | {\n      type: \"add_note\";\n      note: string;\n    }\n  | {\n      type: \"done_note\";\n      id: string;\n    }\n  | {\n      type: \"delete_note\";\n      id: string;\n    };\n\nexport const reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case \"lets_fire\":\n      return {\n        ...state,\n        notes: [\n          ...state.notes,\n          {\n            id: Math.random().toString(36).substring(7),\n            title: action.note,\n            completed: false,\n          },\n        ],\n      };\n    case \"add_note\":\n      return {\n        ...state,\n        notes: [\n          ...state.notes,\n          {\n            id: Math.random().toString(36).substring(7),\n            title: action.note,\n            completed: false,\n          },\n        ],\n      };\n\n    case \"done_note\":\n      return {\n        ...state,\n        notes: state.notes.map((note) =>\n          note.id === action.id ? { ...note, completed: !note.completed } : note\n        ),\n      };\n\n    case \"delete_note\":\n      return {\n        ...state,\n        notes: state.notes.filter(({ id }) => id !== action.id),\n      };\n\n    default:\n      throw new Error();\n  }\n};\n","import React, {\n  FC,\n  memo,\n  useReducer,\n  useState,\n  useRef,\n  useEffect,\n} from 'react';\n\nimport {\n  createSmartappDebugger,\n  createAssistant,\n  AssistantAppState,\n} from \"@sberdevices/assistant-client\";\n\n//import  {Link} from 'react-router-dom';\n\nimport Constants from './constants';\nimport {letters} from './constants/messages';\nimport Header from './components/header'\nimport Chat from './components/chat'\nimport MyBoard from './components/my_board'\nimport OpponentBoard from './components/opponent_board';\n\nimport placeShip from './utils/placeShip';\nimport placeVarious from './utils/standardShipsSet';\n\n\nimport './App.css';\nimport { getRandomInt } from './utils/Common';\nimport { reducer } from \"./store\";\n\n\nconst initializeAssistant = (getState: any) => {\n  console.log('process.env.NODE_ENV=');\n  console.log(process.env.NODE_ENV);\n  if (process.env.NODE_ENV === \"development\") {\n    return createSmartappDebugger({\n      token: process.env.REACT_APP_TOKEN ?? \"\",\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\n      getState,\n    });\n  }\n\n  return createAssistant({ getState });\n};\n\n\nexport const App: FC = memo(() => {\n  const [appState, dispatch] = useReducer(reducer, { notes: [] });\n\n  const [note, setNote] = useState(\"\");\n\n  const assistantStateRef = useRef<AssistantAppState>();\n  const assistantRef = useRef<ReturnType<typeof createAssistant>>();\n\n  useEffect(() => {\n    assistantRef.current = initializeAssistant(() => assistantStateRef.current);\n\n    assistantRef.current.on(\"data\", ({ action }: any) => {\n      if (action) {\n        dispatch(action);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    assistantStateRef.current = {\n      item_selector: {\n        items: appState.notes.map(({ id, title }, index) => ({\n          number: index + 1,\n          id,\n          title,\n        })),\n      },\n    };\n  }, [appState]);\n\n  return (\n    <main className=\"container\">\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          dispatch({ type: \"add_note\", note });\n          setNote(\"\");\n        }}\n      >\n        <input\n          className=\"add-note\"\n          type=\"text\"\n          placeholder=\"Add Note\"\n          value={note}\n          onChange={({ target: { value } }) => setNote(value)}\n          required\n          autoFocus\n        />\n      </form>\n      <ul className=\"notes\">\n        {appState.notes.map((note, index) => (\n          <li className=\"note\" key={note.id}>\n            <span>\n              <span style={{ fontWeight: \"bold\" }}>{index + 1}. </span>\n              <span\n                style={{\n                  textDecorationLine: note.completed ? \"line-through\" : \"none\",\n                }}\n              >\n                {note.title}\n              </span>\n            </span>\n            <input\n              className=\"done-note\"\n              type=\"checkbox\"\n              checked={note.completed}\n              onChange={() => dispatch({ type: \"done_note\", id: note.id })}\n            />\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}