{"version":3,"sources":["constants/index.js","components/header.js","constants/messages.js","components/board.js","components/my_board.js","components/opponent_board.js","utils/placeShip.js","utils/Common.js","utils/checkPlaceShip.js","utils/standardShipsSet.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","this","props","enemyTurn","respectfulAppeal","id","_titleText","React","Component","letters","Board","data","showHidden","grid","rows","_buildRowHeader","y","cells","className","x","push","_renderCell","value","key","classes","_cellId","_cellClasses","onClick","_handleCellClick","onDoubleClick","e","preventDefault","onMouseOver","_handleCellMouseOver","onMouseOut","_handleCellMouseOut","_cellValue","values","i","_boardClasses","_renderRows","MyBoard","_toggleCellClasses","selectedShip","classnames","pointer","cell","ship","Constants","ref","orientation","size","inbounds","overlapping","coords","OpponentBoard","onClickBoard","playerId","currentTurn","hit","field","direction","startSquare","containsShip","shipId","getRandomInt","min","max","Math","ceil","floor","random","codeCoordinate","decodeCoordinate","s","result","s2","replace","toUpperCase","digits_alphabetical","length","toString","substring","includes","parseInt","offsets","j","Ship","incrementId","hitpoints","latestId","placeVarious","enemyField","shot","isShipVisible","variableSet","l","checkPlaceShip","placeShip","AppStyled","styled","div","body1","TypoScale","createGlobalStyle","sberBox","DocStyles","text","background","gradient","ThemeBackgroundEva","darkEva","ThemeBackgroundSber","darkSber","ThemeBackgroundJoy","darkJoy","App","state","assistant","assistantStateRef","createRef","getBoardInitialState","character","gameOver","youWin","getState","current","console","log","process","createAssistant","error","on","type","action","navigation","setState","myDispatch","oldProps","initial_myField","Array","myShips","initial_enemyField","enemyShips","val_in_line","enemy_val_in_line","forEach","ship0","my_grid","enemy_grid","remaining_hit_points","my_line","enemy_line","fieldVal","fieldVal_0","notes","my_board","myField","opponent_board","myAction","sendData","action_id","coord","coord_str","parameters","newEnemyField","slice","live_parts","setTimeout","processEnemyMove","alphabetical_coord","coordinate","offsets4","primary_area","from","_","fill","live_ships","Set","add","_x","_y","primary_targets","targets","canFire","has","fire_coord","fireMyBoard","playerLivesCount","message","_renderResult","_renderOpponentBoard","_renderGameContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8395fe7c.chunk.js","sourcesContent":["export default {\n\n  // Session\n  SESSION_SET_PLAYER: 'SESSION_SET_PLAYER',\n\n  //  Home\n  HOME_NEW_GAME: 'HOME_NEW_GAME',\n  HOME_SET_CURRENT_GAMES: 'HOME_SET_CURRENT_GAMES',\n\n  // Game\n  GAME_SET_CHANNEL: 'GAME_SET_CHANNEL',\n  GAME_PLAYER_JOINED: 'GAME_PLAYER_JOINED',\n  GAME_PLAYER_LEFT: 'GAME_PLAYER_LEFT',\n  GAME_SET_GAME: 'GAME_SET_GAME',\n  GAME_ADD_MESSAGE: 'GAME_ADD_MESSAGE',\n  GAME_SETUP_SELECT_SHIP: 'GAME_SETUP_SELECT_SHIP',\n  GAME_OPPONENTS_BOARD_UPDATE: 'GAME_OPPONENTS_BOARD_UPDATE',\n  GAME_RESET: 'GAME_RESET',\n  GAME_OVER: 'GAME_OVER',\n  GAME_ERROR: 'GAME_ERROR',\n\n  //Ships\n  SHIP_ORIENTATION_HORIZONTAL: 'horizontal',\n  SHIP_ORIENTATION_VERTICAL: 'vertical',\n\n  // Boards\n  GRID_VALUE_WATER: '·',\n  GRID_VALUE_SHIP: '/',\n  GRID_VALUE_WATER_HIT: 'O',\n  GRID_VALUE_SHIP_HIT: '*',\n};\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types'\r\n//import { setDocumentTitle }   from '../../utils';\r\n//import MyBoard from \"./my_board\";\r\n\r\nexport default class Header extends React.Component {\r\n\r\n  componentDidUpdate() {\r\n    //const { game } = this.props;\r\n    // TODO\r\n    //setDocumentTitle(`${this._titleText()} · #${game.id}`);\r\n  }\r\n\r\n  _titleText() {\r\n    //const { game, playerId, currentTurn, my_board, opponents_board } = this.props;\r\n    //const { readyForBattle } = game;\r\n    //let readyForBattle=true;\r\n    const { enemyTurn, respectfulAppeal } = this.props;\r\n\r\n    /*\r\n\r\n    if (!my_board.ready) {\r\n      return 'Place your ships';\r\n    } else if (!opponents_board || !opponents_board.ready) {\r\n      return 'Waiting for opponent';\r\n    } else if (currentTurn && currentTurn === playerId) {\r\n      return 'Your turn!';\r\n    } else if (currentTurn && currentTurn != playerId) {\r\n      return 'Your opponent\\'s turn!';\r\n    } else {\r\n      return 'Let the battle begin';\r\n    }\r\n     */\r\n    if (enemyTurn===true) {\r\n      return respectfulAppeal===false?'Ход твоего оппонента!':'Ход Вашего оппонента!';\r\n    } else {\r\n      return respectfulAppeal===false?'Твой ход!':'Ваш ход!';\r\n    }\r\n    \r\n  }\r\n\r\n  _messageText() {\r\n    const { enemyTurn, respectfulAppeal } = this.props;\r\n    /*\r\n    const { game, playerId, currentTurn } = this.props;\r\n    const { my_board, opponents_board, readyForBattle } = game;\r\n\r\n    if (!my_board.ready) {\r\n      return 'Use the instructions below';\r\n    } else if (!opponents_board || !opponents_board.ready) {\r\n      return 'Battle will start as soon as your opponent is ready';\r\n    } else if (currentTurn && currentTurn === playerId) {\r\n      return 'Click on your shooting grid to open fire!';\r\n    } else if (currentTurn && currentTurn != playerId) {\r\n      return 'Wait for your opponent to shoot...';\r\n    } else {\r\n      return 'Let the battle begin';\r\n    }\r\n     */\r\n    if (enemyTurn===true) {\r\n      return respectfulAppeal===false?'Ход твоего оппонента!':'Ход Вашего оппонента!';\r\n    } else {\r\n      return respectfulAppeal===false?'Твой ход!':'Ваш ход!';\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header id=\"game_header\">\r\n        <h1>{this._titleText()}</h1>\r\n        {/*<p>{this._messageText()}</p>*/}\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","\r\nexport const letters = ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ж', 'З', 'И', 'К'];\r\n\r\nexport const hello_messages = ['Привет!'];\r\nexport const hit_messages = ['Неплохо для слепого!'];\r\nexport const miss_messages = ['Мазила!', 'Мимо!', 'Промах!'];\r\nexport const kill_messages = ['Убил!'];\r\nexport const dont_understand = ['Моя твоя не понимай!'];\r\n\r\n","import React, {PropTypes} from 'react';\nimport classnames         from 'classnames';\nimport Constants from '../constants';\nimport {letters} from '../constants/messages';\n//import { setGame }        from '../../actions/game';\n\nexport default class Board extends React.Component {\n\n  constructor(props)\n  {\n    super(props);\n  }\n\n  _renderRows(data, showHidden) {\n\n    // showHidden важно только для opponent_board\n    const { grid } = data;\n\n    let rows = [this._buildRowHeader()];\n\n    for (let y = 0; y < 10; y++) {\n      let cells = [<div key={`header-${y}`} className=\"header cell\">{y + 1}</div>];\n\n      for (let x = 0; x < 10; x++) {\n        //cells.push(this._renderCell(y, x, grid[`${y}${x}`]));\n        // 15.02.2021 у нас это не строка 00, 01, 02 и т.д., а двухмерный массив\n        cells.push(this._renderCell(y, x, grid[y][x], showHidden));\n      }\n\n      rows.push(<div className=\"row\" key={y}>{cells}</div>);\n    }\n/*\n      let rows = [this._buildRowHeader()];\n\n      for (let y = 0; y < 10; y++) {\n          let cells = [<div key={`header-${y}`} className=\"header cell\">{y + 1}</div>];\n\n          for (let x = 0; x < 10; x++) {\n              cells.push(this._renderCell(y, x, '*'));\n          }\n\n          rows.push(<div className=\"row\" key={y}>{cells}</div>);\n      }\n*/\n\n\n    return rows;\n  }\n\n  _renderCell(y, x, value, showHidden) {\n    const key = `${y}${x}`;\n    const id = this._cellId(key);\n    const classes = this._cellClasses(value, showHidden);\n\n    return (\n      <div\n        id={this._cellId(key)}\n        className={classes}\n        key={key}\n        onClick={this._handleCellClick(y, x, value)}\n        onDoubleClick={(e) => e.preventDefault()}\n        onMouseOver={(y,x)=>this._handleCellMouseOver(y, x)}\n        onMouseOut={(y,x)=>this._handleCellMouseOut(y, x)}>{this._cellValue(value)}</div>\n    );\n  }\n\n  _buildRowHeader() {\n    let values = [<div key=\"empty\" className=\"header cell\"></div>];\n\n    for (var i = 0; i < 10; ++i) {\n      //  values.push(<div key={i} className=\"header cell\">{String.fromCharCode(i + 65)}</div>);\n      values.push(<div key={i} className=\"header cell\">{letters[i]}</div>);\n    }\n\n\n\n    return (\n      <div key=\"col-headers\" className=\"row\">\n        {values}\n      </div>\n    );\n  }\n\n  render() {\n      // 14.02.2012 TODO\n    const { data, showHidden } = this.props;\n    //if (!data) return false;\n\n    const classes = this._boardClasses();\n\n    return (\n      <div className={classes}>\n        {this._renderRows(data, showHidden)}\n      </div>\n    );\n  }\n}\n","import React, {PropTypes} from 'react';\nimport classnames         from 'classnames';\nimport Board              from './board';\nimport Constants          from '../constants';\n//import { setGame }        from '../../actions/game';\n//import { setError }       from '../../actions/game';\n\nexport default class MyBoard extends Board {\n\n    _handleCellClick(y, x, value) {\n    //const { selectedShip, gameChannel, dispatch } = this.props;\n    //const key = `${y}${x}`;\n\n    // 14.02.2021 Добавил\n    //const ready=true;\n    //\n\n    // Это было в actions\n    //  function setGame(game) {\n    //    return {\n    //      type: Constants.GAME_SET_GAME,\n    //      game: game,\n    //    };\n    //  }\n\n\n    return (e) => {\n      //if (selectedShip.id === null) return false;\n      if (value != Constants.GRID_VALUE_WATER) return false;\n\n      //const ship = {\n      //  x: x,\n      //  y: y,\n      //  size: selectedShip.size,\n      //  orientation: selectedShip.orientation,\n      //};\n\n      // TODO 08.02.2021\n      //gameChannel.push('game:place_ship', { ship: ship })\n      //.receive('ok', (payload) => dispatch(setGame(payload.game)));\n      //.receive('error', (payload) => dispatch(setError(payload.reason)));\n\n      return false;\n\n    };\n  }\n\n  _handleCellMouseOver(y, x) {\n    return this._toggleCellClasses(y, x);\n  }\n\n  _handleCellMouseOut(y, x) {\n    return this._toggleCellClasses(y, x);\n  }\n\n  _toggleCellClasses(y, x) {\n      // TODO это расстановка\n      /*\n    const { selectedShip } = this.props;\n\n    if (selectedShip.size === 0) return false;\n\n    const { size, orientation } = selectedShip;\n\n    const className = this._validCoords(y, x, orientation, size) ? 'ship-shape' : 'ship-shape-invalid';\n\n    return (e) => {\n      for (var i = 0; i < size; i++) {\n        const coords = orientation === 'horizontal' ? `${y}${x + i}` : `${y + i}${x}`;\n        let cell = document.getElementById(coords);\n        if (!cell) break;\n        cell.classList.toggle(className);\n      }\n    };\n       */\n  }\n\n  _cellValue(value) {\n    return false;\n  }\n\n  _boardClasses() {\n    const { selectedShip } = this.props;\n\n    return classnames({\n      grid: true,\n      pointer: selectedShip && selectedShip.id != null,\n    });\n  }\n\n  _cellClasses(value, showHidden) {\n    return classnames({\n      cell: true,\n      ship: value === Constants.GRID_VALUE_SHIP,\n      'ship-hit': value === Constants.GRID_VALUE_SHIP_HIT,\n      'water-hit': value === Constants.GRID_VALUE_WATER_HIT,\n    });\n  }\n\n  _cellId(ref) {\n    return ref;\n  }\n\n  _validCoords(y, x, orientation, size) {\n    const { data } = this.props;\n    let inbounds;\n\n    if (orientation === 'horizontal') {\n      inbounds = (x + size) <= 10;\n    } else {\n      inbounds = (y + size) <= 10;\n    }\n\n    let overlapping = false;\n\n    for (var i = 0; i < size; i++) {\n      const coords = orientation === 'horizontal' ? `${y}${x + i}` : `${y + i}${x}`;\n      if (data.grid[coords] != Constants.GRID_VALUE_WATER) {\n        overlapping = true;\n        break;\n      }\n    }\n\n    return inbounds && !overlapping;\n  }\n}\n","import React, {PropTypes} from 'react';\nimport classnames         from 'classnames';\nimport Board              from './board';\nimport Constants          from '../constants';\n//import { setGame }        from '../../actions/game';\n\nexport default class OpponentBoard extends Board {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  _handleCellClick(y, x, value) {\n    //const { gameChannel, currentTurn, playerId, dispatch } = this.props;\n\n    //if (currentTurn !== playerId) return false;\n\n    //const key = `${y}${x}`;\n\n    // Это было в actions\n    //function setGame(game) {\n    //  return {\n    //    type: Constants.GAME_SET_GAME,\n    //    game: game,\n    //  };\n    //}\n\n    return (e) => { \n      this.props.onClickBoard(x, y);\n    }\n\n\n    //return (e) => {\n    //  if (value != Constants.GRID_VALUE_WATER) return false;\n\n      //gameChannel.push('game:shoot', { y: y, x: x })\n      //.receive('ok', (payload) => {\n      //  dispatch(setGame(payload.game));\n      //})\n      //.receive('error', (payload) => console.log(payload));\n\n\n    //};\n  }\n\n  _handleCellMouseOver(y, x) {\n    return false;\n  }\n\n  _cellValue(value) {\n    return '';\n  }\n\n  _boardClasses() {\n    const { playerId, currentTurn } = this.props;\n\n    return classnames({\n      grid: true,\n      pointer: playerId === currentTurn,\n    });\n  }\n\n  _cellClasses(value, showHidden) {\n    return classnames({\n      cell: true,\n      // TODO только во время отладки\n      ship: showHidden && value === Constants.GRID_VALUE_SHIP,\n      //\n      hit: value === Constants.GRID_VALUE_SHIP_HIT,\n      'water-hit': value === Constants.GRID_VALUE_WATER_HIT,\n    });\n  }\n\n  _cellId(ref) {\n    return false;\n  }\n\n  _handleCellMouseOut(e) {\n    return false;\n  }\n}\n","// небольшая функция-сниппет, которая добавляет корабль на поле\n// сдвиг на единицу появился из-за отсчета индекса массива с нуля\n\nexport default (field, ship) => {\n    switch(ship.direction) {\n        case 'right': \n        for (let i = ship.startSquare.x - 1; i < ship.startSquare.x - 1 + ship.size; i++) {\n            field[ship.startSquare.y - 1][i].containsShip = true;\n            field[ship.startSquare.y - 1][i].shipId = ship.id;\n        }\n        break;\n        case 'down': \n        for (let i = ship.startSquare.y - 1; i < ship.startSquare.y - 1 + ship.size; i++) {\n            field[i][ship.startSquare.x - 1].containsShip = true;\n            field[i][ship.startSquare.x - 1].shipId = ship.id;\n        }\n        break;\n        default:\n    }\n}\n","\r\nimport { letters } from '../constants/messages';\r\n\r\n\r\nexport function getRandomArbitrary(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function codeCoordinate(x, y)\r\n{\r\n  return letters[x]+(y+1);\r\n}\r\n\r\n\r\nexport function decodeCoordinate(s)\r\n{\r\n  let result=null;\r\n  let y=-1;\r\n  // И сразу добавим пробелы по краям, чтобы можно было найти числа, произнесенные голосом\r\n  let s2=s.replace(\"-\", \" \").toUpperCase();\r\n  const digits_alphabetical=['ОДИН', 'ДВА', 'ТРИ', 'ЧЕТЫРЕ', 'ПЯТЬ', 'ШЕСТЬ', 'СЕМЬ', 'ВОСЕМЬ', 'ДЕВЯТЬ', 'ДЕСЯТЬ'];\r\n  for (let i=0; i<digits_alphabetical.length; i++)\r\n  {\r\n    s2=s2.replace(digits_alphabetical[i], (i+1).toString());\r\n  }\r\n  s2=s2.replace(\" \", \"\");\r\n  if (s2.length===3&&s2.substring(1)===\"10\")\r\n  {\r\n    y=9;\r\n  } else if (s2.length===2) {\r\n    if ('0123456789'.includes(s2.substring(2)))\r\n      y=parseInt(s2.substring(1))-1;\r\n  }\r\n  switch (s2.substring(0,1))\r\n  {\r\n    case 'А':\r\n      result={x:0, y:y};\r\n      break;\r\n    case 'Б':\r\n      result={x:1, y:y};\r\n      break;\r\n    case 'В':\r\n      result={x:2, y:y};\r\n      break;\r\n    case 'Г':\r\n      result={x:3, y:y};\r\n      break;\r\n    case 'Д':\r\n      result={x:4, y:y};\r\n      break;\r\n    case 'Е':\r\n      result={x:5, y:y};\r\n      break;\r\n    case 'Ж':\r\n      result={x:6, y:y};\r\n      break;\r\n    case 'З':\r\n      result={x:7, y:y};\r\n      break;\r\n    case 'И':\r\n      result={x:8, y:y};\r\n      break;\r\n    case 'К':\r\n      result={x:9, y:y};\r\n      break;\r\n                                                                \r\n  }\r\n  return result;\r\n}","\nexport default (field, ship) => {\n    const offsets=[{x:-1,y:-1}, {x:0,y:-1}, {x:1,y:-1},\n        {x:-1,y:0}, {x:0,y:0}, {x:1,y:0},\n        {x:-1,y:1}, {x:0,y:1}, {x:1,y:1},\n    ];\n    switch(ship.direction) {\n        case 'right':\n            for (let i = ship.startSquare.x - 1; i < ship.startSquare.x - 1 + ship.size; i++) {\n                //field[ship.startSquare.y - 1][i].containsShip = true;\n                //field[ship.startSquare.y - 1][i].shipId = ship.id;\n                for (let j=0; j<offsets.length; j++)\n                {\n                    let y=offsets[j].y+ship.startSquare.y - 1;\n                    let x=offsets[j].x+i;\n                    if (x<0||y<0||x>=10|y>=10)\n                    {\n                        // корабль находится в углу поля, там других кораблей нет\n                    } else {\n                        if (field[y][x].containsShip)\n                            return false;\n                    }\n                }\n\n            }\n            break;\n        case 'down':\n            for (let i = ship.startSquare.y - 1; i < ship.startSquare.y - 1 + ship.size; i++) {\n                //field[i][ship.startSquare.x - 1].containsShip = true;\n                //field[i][ship.startSquare.x - 1].shipId = ship.id;\n                for (let j=0; j<offsets.length; j++)\n                {\n                    let y=offsets[j].y+i;\n                    let x=offsets[j].x+ship.startSquare.x - 1;\n                    if (x<0||y<0||x>=10|y>=10)\n                    {\n                        // корабль находится в углу поля, там других кораблей нет\n                    } else {\n                        if (field[y][x].containsShip)\n                            return false;\n                    }\n                }\n\n            }\n            break;\n        default:\n    }\n    return true;\n}","// компонент, который создает и экспортирует стандартный набор кораблей\n// направление кораблю задается для того, чтобы можно было определить, в какую сторону его рисовать из стартовой точки\n// Размещать корабли можно либо вертикально, либо горизонтально, были выбраны направления вправо(right) и вниз(down), \n// поскольку они совпадают с положительными направлениеми координатных осей\n\nimport {getRandomInt} from './Common'\nimport placeShip from \"./placeShip\";\nimport checkPlaceShip from \"./checkPlaceShip\";\n\nclass Ship {\n    constructor(size, startSquare, direction) {\n        this.size = size;\n        this.startSquare = startSquare;\n        this.direction = direction;\n        this.id = Ship.incrementId();\n        this.hitpoints = this.size;\n    }\n\n    static incrementId() {\n        if (!this.latestId) {\n            this.latestId = 1;\n        } else {\n            this.latestId++;\n        }\n        return this.latestId\n    }\n}\n\n\nexport function placeVarious()\n{\n    let enemyField = [];\n\n    // первоначальное (пустое) состояние поля\n    for (let i = 0; i < 10; i++) {\n        enemyField.push([]);\n    }\n\n    for (let i = 0; i < 10; i++) {\n        for (let j = 0; j < 10; j++) {\n            enemyField[i].push({\n                x: j,\n                y: i,\n                containsShip: false,\n                shot: false,\n                isShipVisible: false,\n                shipId: null,\n            });\n        }\n    }\n\n\n    let variableSet = [];\n    // i-порядок расстановки (оно же количество короблей такой длины)\n    // и соответственно длина на каждом уровне  5-i\n    for (let i=1; i<=4; i++)\n    {\n        for (let j=1; j<=i; j++)\n        {\n            // длина корабля\n            let l=5-i;\n            let ship, x, y;\n            for(;;) {\n                x = getRandomInt(1, 10 - l + 1);\n                y = getRandomInt(1, 10);\n\n                let direction=Math.random();\n                if (direction>= 0.5) {\n                    ship = new Ship(l, {y: y, x: x}, 'right');\n                } else {\n                    ship = new Ship(l, {y: x, x: y}, 'down');\n                }\n                if (checkPlaceShip(enemyField, ship))\n                   break;\n            }\n            placeShip(enemyField, ship);\n            variableSet.push(ship);\n        }\n\n    }\n    return variableSet;\n}\n\nexport default placeVarious;","import React, {\r\n  FC,\r\n  memo,\r\n  useReducer,\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  RefObject,\r\n} from 'react';\r\n\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n  AssistantAppState,\r\n  AssistantSmartAppData,\r\n  AssistantCharacterType\r\n} from \"@sberdevices/assistant-client\";\r\n\r\n//import  {Link} from 'react-router-dom';\r\n\r\nimport Constants from './constants';\r\nimport Header from './components/header'\r\nimport Chat from './components/chat'\r\nimport MyBoard from './components/my_board'\r\nimport OpponentBoard from './components/opponent_board';\r\n\r\nimport placeShip from './utils/placeShip';\r\nimport placeVarious from './utils/standardShipsSet';\r\n\r\n\r\n// Это не обязательно, т.к. все в в index на самом деле\r\n//import './App.css';\r\n\r\nimport { getRandomInt, codeCoordinate, decodeCoordinate} from './utils/Common';\r\nimport { ContextApp, initialState, reducer } from \"./store\";\r\n\r\n// createGlobalStyle нужен для создания глобальных стилей\r\nimport styled, { createGlobalStyle, css } from 'styled-components';\r\n\r\n// получаем значение для целевой платформы\r\nimport { sberBox } from '@sberdevices/plasma-tokens/typo';\r\n// получаем стилевые объекты для нашего интерфейса\r\nimport { body1, headline2 } from '@sberdevices/plasma-tokens';\r\n\r\n// получаем тему персонажа\r\nimport { darkEva, darkSber, darkJoy } from '@sberdevices/plasma-tokens/themes';\r\n\r\n// получаем цвета для нашего интерфейса\r\nimport { text, background, gradient } from '@sberdevices/plasma-tokens';\r\n\r\nimport { Button } from '@sberdevices/ui';\r\nimport { createArrayTypeNode } from 'typescript';\r\n\r\n//import { IconDownload } from '@sberdevices/plasma-icons';\r\n\r\n\r\n\r\nconst AppStyled = styled.div`\r\n    padding: 30px;\r\n    ${body1}\r\n`;\r\n\r\n// создаем react-компонент c глобальными стилями типографики\r\nconst TypoScale = createGlobalStyle(sberBox);\r\n\r\n// создаем react-компонент для подложки\r\nconst DocStyles = createGlobalStyle`\r\n    /* stylelint-disable-next-line selector-nested-pattern */\r\n    html {\r\n        color: ${text};\r\n        background-color: ${background};\r\n        background-image: ${gradient};\r\n\r\n        /** необходимо залить градиентом всю подложку */\r\n        min-height: 100vh;\r\n    }\r\n`;\r\n// создаем react-компонент для персонажа\r\n//const Theme = createGlobalStyle(darkJoy);\r\n//const Theme = createGlobalStyle(lightJoy);\r\n\r\nconst ThemeBackgroundEva = createGlobalStyle(darkEva);\r\nconst ThemeBackgroundSber = createGlobalStyle(darkSber);\r\nconst ThemeBackgroundJoy = createGlobalStyle(darkJoy);\r\n\r\n// Плазма\r\n//https://plasma.sberdevices.ru/current/?path=/docs/about--page\r\n\r\n\r\nconst initializeAssistant = (getState: any) => {\r\n  console.log('process.env.NODE_ENV=');\r\n  console.log(process.env.NODE_ENV);\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    return createSmartappDebugger({\r\n      token: process.env.REACT_APP_TOKEN ?? \"\",\r\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\r\n      getState,\r\n    });\r\n  }\r\n\r\n  return createAssistant({ getState });\r\n};\r\n\r\n\r\n\r\n\r\nfunction handleClickOpponentBoard(x: any, y: any) {\r\n  // TODO\r\n  //alert('You fire ' + x + \"/\" + y);\r\n  //this.state.opponent_board.grid[y][x] = Constants.GRID_VALUE_SHIP_HIT;\r\n\r\n  /*\r\n\r\n  const alphabetical_coord=this.codeCoordinate(x, y);\r\n\r\n  let messages2 = [...this.state.messages];\r\n  messages2.push({text: alphabetical_coord, mine: true});\r\n  this.setState({messages: messages2});\r\n\r\n  let fire_registered=false;\r\n\r\n  let field=this.state.enemyField[y][x];\r\n  if (field.containsShip)\r\n  {\r\n    // Попали в корабль\r\n    if (!field.shot)\r\n    {\r\n      // До этого в это поле не попадали\r\n      fire_registered=true;\r\n      let newEnemyField=this.state.enemyField.slice();\r\n      newEnemyField[y][x].shot=true;\r\n      let shipId=field.shipId;\r\n      // Проверим, есть ли еще не подбитые его части\r\n      let live_parts=0;\r\n      for (let y = 0; y < 10; y++) {\r\n        for (let x = 0; x < 10; x++) {\r\n          if (newEnemyField[y][x].containsShip && newEnemyField[y][x].shipId===shipId)\r\n          {\r\n            if (!newEnemyField[y][x].shot)\r\n              live_parts++;\r\n          }\r\n        }\r\n      }\r\n      // TODO если корабль полностью подбит, рисовать его как-то по-другому\r\n  \r\n      let grid=this.state.opponent_board.grid.slice();\r\n      grid[y][x] = Constants.GRID_VALUE_SHIP_HIT;\r\n      let remaining_hit_points=this.state.opponent_board.remaining_hit_points;\r\n      remaining_hit_points--;\r\n      this.setState({ enemyField: newEnemyField, opponent_board: { ...this.state.opponent_board, grid: grid, remaining_hit_points: remaining_hit_points} });\r\n    } else {\r\n      // Повторное попадание\r\n    }\r\n  } else {\r\n    // Попали в воду\r\n    let grid=this.state.opponent_board.grid.slice();\r\n    if (grid[y][x] === Constants.GRID_VALUE_WATER)\r\n    {\r\n      // До этого туда не стреляли\r\n      fire_registered=true;\r\n      // хотя это бы и не обязательно делать (заполнять enemyField для воды), все равно попадание у нас контролируется по-другому,\r\n      // но для корректности данных лучше так сделать\r\n      let newEnemyField=this.state.enemyField.slice();\r\n      newEnemyField[y][x].shot=true;\r\n      //\r\n      grid[y][x] = Constants.GRID_VALUE_WATER_HIT;\r\n      this.setState({ enemyField: newEnemyField, opponent_board: { ...this.state.opponent_board, grid: grid} });\r\n    }\r\n  }\r\n\r\n  //if (fire_registered)\r\n  // this.processEnemyMove();\r\n  */\r\n}\r\n\r\nexport class App extends React.Component<any, any> {\r\n\r\n  //assistantRef = React.createRef<ReturnType<typeof createAssistant>>();\r\n  //assistantRef = React.createRef<AssistantSmartAppData>();\r\n  //private assistantRef :RefObject<ReturnType<typeof createAssistant>>;\r\n  private assistant :any = null;\r\n  \r\n  assistantStateRef = React.createRef<AssistantAppState>();\r\n  //assistant: AssistantAppState=null;\r\n\r\n  constructor(props:any, state:any) {\r\n    super(props);\r\n    this.state=this.getBoardInitialState();\r\n    this.state={...this.state, \r\n      character: 'sber', respectfulAppeal: true, \r\n      enemyTurn: false, gameOver: false, youWin: false,\r\n      showHidden: false\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    // TODO\r\n    try {\r\n      this.assistant = initializeAssistant(() => this.assistantStateRef.current);\r\n    } catch (error) {\r\n      this.assistant = null;\r\n    }\r\n\r\n    // type='character', character='sber'\r\n    this.assistant?.on('data', ({ type, character, navigation, action }: any) => {\r\n      if (character)\r\n      {\r\n        // 'sber' | 'eva' | 'joy';\r\n        this.setState({...this.state, character: character.id, respectfulAppeal: character.id!=='joy'});\r\n      }\r\n      //if (navigation)\r\n      if (action)\r\n      {\r\n        /*\r\n        if (action.type==='lets_fire')\r\n        {\r\n          let coord=decodeCoordinate(action.coord_str);\r\n          if (coord)\r\n          {\r\n          }\r\n        }\r\n        */\r\n       this.myDispatch(action);\r\n      }\r\n  });\r\n\r\n\r\n  }\r\n\r\n  componentDidUpdate(oldProps: any) {\r\n  }\r\n  \r\n  getBoardInitialState()\r\n  {\r\n    let initial_myField = Array(0);\r\n    let myShips = placeVarious();\r\n  \r\n    let initial_enemyField = Array(0);\r\n    let enemyShips = placeVarious();\r\n  \r\n  \r\n    // первоначальное (пустое) состояние поля\r\n    //for (let i = 0; i < 10; i++) {\r\n    //  initial_myField.push([]);\r\n    //  initial_enemyField.push([]);\r\n    //}\r\n  \r\n    for (let i = 0; i < 10; i++) {\r\n      let val_in_line = [];\r\n      let enemy_val_in_line = [];\r\n  \r\n      for (let j = 0; j < 10; j++) {\r\n        val_in_line.push({\r\n          x: j,\r\n          y: i,\r\n          containsShip: false,\r\n          shot: false,\r\n          isShipVisible: false,\r\n          shipId: null,\r\n        });\r\n  \r\n        enemy_val_in_line.push({\r\n          x: j,\r\n          y: i,\r\n          containsShip: false,\r\n          shot: false,\r\n          isShipVisible: false,\r\n          shipId: null,\r\n        });\r\n      }\r\n  \r\n      initial_myField.push(val_in_line);\r\n      initial_enemyField.push(enemy_val_in_line);\r\n    }\r\n  \r\n      // расставляем стандартный набор кораблей\r\n      myShips.forEach((ship: any) => {\r\n        placeShip(initial_myField, ship)\r\n      });\r\n      enemyShips.forEach((ship0: any) => {\r\n        placeShip(initial_enemyField, ship0)\r\n      });\r\n  \r\n  \r\n    let my_grid = [];\r\n    let enemy_grid = [];\r\n  \r\n    // Заполняем из наших массивов\r\n    let remaining_hit_points = 0;\r\n    for (let y = 0; y < 10; y++) {\r\n      let my_line = [];\r\n      let enemy_line = [];\r\n      for (let x = 0; x < 10; x++) {\r\n        // Наши корабли\r\n        let fieldVal = initial_myField[y][x];\r\n        let fieldVal_0 = fieldVal.shot ? Constants.GRID_VALUE_WATER_HIT : Constants.GRID_VALUE_WATER;\r\n        if (fieldVal.containsShip)\r\n          fieldVal_0 = fieldVal.shot ? Constants.GRID_VALUE_SHIP_HIT : Constants.GRID_VALUE_SHIP;\r\n        my_line.push(fieldVal_0);\r\n        // Корабли оппонента\r\n        fieldVal = initial_enemyField[y][x];\r\n        fieldVal_0 = fieldVal.shot ? Constants.GRID_VALUE_WATER_HIT : Constants.GRID_VALUE_WATER;\r\n        if (fieldVal.containsShip) {\r\n          fieldVal_0 = fieldVal.shot ? Constants.GRID_VALUE_SHIP_HIT : Constants.GRID_VALUE_SHIP;\r\n          remaining_hit_points++;\r\n        }\r\n        enemy_line.push(fieldVal_0);\r\n      }\r\n  \r\n      my_grid.push(my_line);\r\n      enemy_grid.push(enemy_line);\r\n  \r\n    }\r\n  \r\n    let initial_my_board = { grid: my_grid };\r\n    let initial_opponent_board = { grid: enemy_grid, remaining_hit_points};\r\n  \r\n    return {\r\n      notes: [],\r\n      my_board: initial_my_board,\r\n      myField: initial_myField,\r\n      opponent_board: initial_opponent_board,\r\n      enemyField: initial_enemyField\r\n    };\r\n\r\n  }\r\n\r\n  // { type: \"lets_fire\", coord_str: codeCoordinate(x,y)})\r\n  myDispatch(myAction: any)\r\n  {\r\n\r\n    if (myAction.type==='show_ships')\r\n    {\r\n      this.setState({...this.state, showHidden: true});\r\n    }\r\n\r\n    if (myAction.type==='lets_fire')\r\n    if (this.state.enemyTurn)\r\n    {\r\n      // тут про сессии можно почитать\r\n      // https://developer.sberdevices.ru/docs/ru/developer_tools/ide/JS_API/session_lifetime_control\r\n      this.assistant?.sendData({ action: { action_id: 'myMove'} });\r\n    } else\r\n    {\r\n      //alert(myAction.coord_str);\r\n      let fire_registered=false;\r\n      let coord=decodeCoordinate(myAction.coord_str);\r\n      if (coord)\r\n      {\r\n        let x=coord.x, y=coord.y;\r\n\r\n        let field=this.state.enemyField[y][x];\r\n        if (field.containsShip)\r\n        {\r\n          // Попали в корабль\r\n          if (!field.shot)\r\n          {\r\n            // До этого в это поле не попадали\r\n            fire_registered=true;\r\n            let newEnemyField=this.state.enemyField.slice();\r\n            newEnemyField[y][x].shot=true;\r\n            let shipId=field.shipId;\r\n            // Проверим, есть ли еще не подбитые его части\r\n            let live_parts=0;\r\n            for (let y = 0; y < 10; y++) {\r\n              for (let x = 0; x < 10; x++) {\r\n                if (newEnemyField[y][x].containsShip && newEnemyField[y][x].shipId===shipId)\r\n                {\r\n                  if (!newEnemyField[y][x].shot)\r\n                    live_parts++;\r\n                }\r\n              }\r\n            }\r\n            // TODO если корабль полностью подбит, рисовать его как-то по-другому\r\n        \r\n            let grid=this.state.opponent_board.grid.slice();\r\n            grid[y][x] = Constants.GRID_VALUE_SHIP_HIT;\r\n            //setState({ enemyField: newEnemyField, opponent_board: { ...appState.opponent_board, grid: grid, remaining_hit_points: remaining_hit_points} });\r\n            if (live_parts>0)\r\n              this.assistant?.sendData({ action: { action_id: 'fireHit', parameters: { coord: myAction.coord_str} } });\r\n            else\r\n              this.assistant?.sendData({ action: { action_id: 'fireDone', parameters: { coord: myAction.coord_str} } });\r\n            if (this.state.opponent_board.remaining_hit_points<=1)\r\n            {\r\n              // игрок выиграл\r\n              this.setState({...this.state,\r\n                opponent_board: {grid: grid, remaining_hit_points: this.state.opponent_board.remaining_hit_points-1},\r\n                enemyField: newEnemyField,\r\n                gameOver: true,\r\n                youWin: true\r\n                });\r\n            } else {\r\n              // просто очередное попадание, ход не переходит\r\n              this.setState({...this.state,\r\n              opponent_board: {grid: grid, remaining_hit_points: this.state.opponent_board.remaining_hit_points-1},\r\n              enemyField: newEnemyField\r\n              });\r\n            }\r\n\r\n          } else {\r\n            // Повторное попадание. Ход считаем, что не переходит\r\n            this.assistant?.sendData({ action: { action_id: 'fireAgain', parameters: { coord: myAction.coord_str} } });\r\n          }\r\n        } else {\r\n          // Попали в воду\r\n          let grid=this.state.opponent_board.grid.slice();\r\n          if (grid[y][x] === Constants.GRID_VALUE_WATER)\r\n          {\r\n            // До этого туда не стреляли\r\n            fire_registered=true;\r\n            // хотя это бы и не обязательно делать (заполнять enemyField для воды), все равно попадание у нас контролируется по-другому,\r\n            // но для корректности данных лучше так сделать\r\n            let newEnemyField=this.state.enemyField.slice();\r\n            newEnemyField[y][x].shot=true;\r\n            //\r\n            grid[y][x] = Constants.GRID_VALUE_WATER_HIT;\r\n            //this.setState({ enemyField: newEnemyField, opponent_board: { ...this.state.opponent_board, grid: grid} });\r\n            this.setState({\r\n              ...this.state,\r\n              opponent_board: { ...this.state.opponent_board, grid: grid}, enemyField: newEnemyField,\r\n              enemyTurn: true\r\n            });\r\n          }\r\n          this.assistant?.sendData({ action: { action_id: 'fireMiss', parameters: { coord: myAction.coord_str} } });\r\n        }\r\n      }\r\n\r\n      // Теперь он сам стреляет\r\n      // (сделано специально, чтобы в любом случае произошла проверка, чтобы игровой процесс не остановился по какой-нибудь причине)\r\n      setTimeout(() => this.processEnemyMove(), 1200);\r\n\r\n    }\r\n  }\r\n\r\n  // вернет true, если оппонент попал\r\n  // в этом случае ход не переходит\r\n  fireMyBoard(alphabetical_coord: string)\r\n  {\r\n    const coordinate=decodeCoordinate(alphabetical_coord);\r\n    if (coordinate==null)\r\n      return false;\r\n    const x=coordinate.x;\r\n    const y=coordinate.y;\r\n\r\n    let fire_registered=false;\r\n\r\n    let field=this.state.myField[y][x];\r\n    if (field.containsShip)\r\n    {\r\n      // Попали в корабль\r\n      if (!field.shot)\r\n      {\r\n        // До этого в это поле не попадали\r\n        fire_registered=true;\r\n        let newEnemyField=this.state.myField.slice();\r\n        newEnemyField[y][x].shot=true;\r\n        let shipId=field.shipId;\r\n        // Проверим, есть ли еще не подбитые его части\r\n        let live_parts=0;\r\n        for (let y = 0; y < 10; y++) {\r\n          for (let x = 0; x < 10; x++) {\r\n            if (newEnemyField[y][x].containsShip && newEnemyField[y][x].shipId===shipId)\r\n            {\r\n              if (!newEnemyField[y][x].shot)\r\n                live_parts++;\r\n            }\r\n          }\r\n        }\r\n        // TODO если корабль полностью подбит, рисовать его как-то по-другому\r\n    \r\n        let grid=this.state.my_board.grid.slice();\r\n        grid[y][x] = Constants.GRID_VALUE_SHIP_HIT;\r\n        this.setState({ myField: newEnemyField, my_board: { ...this.state.my_board, grid: grid} });\r\n        return true;\r\n      } else {\r\n        // Повторное попадание\r\n      }\r\n    } else {\r\n      // Попали в воду\r\n      let grid=this.state.my_board.grid.slice();\r\n      if (grid[y][x] === Constants.GRID_VALUE_WATER)\r\n      {\r\n        // До этого туда не стреляли\r\n        fire_registered=true;\r\n        let newEnemyField=this.state.myField.slice();\r\n        newEnemyField[y][x].shot=true;\r\n        grid[y][x] = Constants.GRID_VALUE_WATER_HIT;\r\n        this.setState({ myField: newEnemyField, my_board: { ...this.state.my_board, grid: grid} });\r\n      }\r\n    }\r\n    return false;\r\n\r\n  }\r\n\r\n  processEnemyMove()\r\n  {\r\n    // только в свой ход\r\n    if (!this.state.enemyTurn)\r\n      return;\r\n\r\n    const offsets=[{x:-1,y:-1}, {x:0,y:-1}, {x:1,y:-1},\r\n      {x:-1,y:0}, {x:0,y:0}, {x:1,y:0},\r\n      {x:-1,y:1}, {x:0,y:1}, {x:1,y:1},\r\n    ];\r\n\r\n    const offsets4=[{x:0,y:-1},{x:-1,y:0},{x:1,y:0},{x:0,y:1}];\r\n\r\n    let field=this.state.myField;\r\n    // Первый проход, ищем точки, где рядом есть с попаданиями\r\n    // они будут иметь признак первичных\r\n    // а уже на втором проходе будет происходить поиск, куда можно в принципе выстрелить\r\n    // поэтому если координата будет иметь признак первичной, но стрелять туда нельзя, она в массив не попадет\r\n    let primary_area=Array.from(Array(10), _ => Array(10).fill(0));\r\n    // если в этой координате подбитый корабль\r\n    // найдем, есть ли не подбитые в 4-х направлениях от него\r\n    // и если есть, то это он сам (т.к. нельзя ставить рядом)\r\n    // Заодно заполним список живых кораблей\r\n    let live_ships=new Set();\r\n    for (let y = 0; y < 10; y++) {\r\n      for (let x = 0; x < 10; x++) {\r\n        for (let i=0; i<offsets4.length; i++){\r\n          if (field[y][x].containsShip&&!field[y][x].shot) {\r\n            live_ships.add(field[y][x].shipId);\r\n          }\r\n          let _x=x+offsets4[i].x;\r\n          let _y=y+offsets4[i].y;\r\n          if (_x>=0&&_x<10&&_y>=0&&_y<10&&field[_y][_x].containsShip&&field[_y][_x].shot)\r\n          {\r\n            primary_area[y][x]=1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let primary_targets=[];\r\n    let targets=[];\r\n\r\n    // составим массив координат, куда враг может выстрелить\r\n    for (let y = 0; y < 10; y++) {\r\n      for (let x = 0; x < 10; x++) {\r\n        // если туда еще не стреляли\r\n        let canFire=true;\r\n        if (!field[y][x].shot)\r\n        {\r\n          // и вблизи нет подбитых (полностью) кораблей\r\n          for (let i=0; i<offsets.length; i++){\r\n            let _x=x+offsets[i].x;\r\n            let _y=y+offsets[i].y;\r\n            if (_x>=0&&_x<10&&_y>=0&&_y<10&&field[_y][_x].containsShip&&field[_y][_x].shot)\r\n            {\r\n              if (!live_ships.has(field[_y][_x].shipId))\r\n              {\r\n                canFire=false;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          if (canFire)\r\n          {\r\n            targets.push({y:y, x:x});\r\n            if (primary_area[y][x]===1)\r\n              primary_targets.push({y:y, x:x});\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // На всякий случай проверка, что есть куда выстрелить (по идее в этом случае игра уже закончена)\r\n    if (targets.length>0)\r\n    {\r\n      // Координаты выстрела\r\n      let fire_coord=primary_targets.length>0?primary_targets[getRandomInt(0, primary_targets.length-1)]:targets[getRandomInt(0, targets.length-1)];\r\n\r\n      let alphabetical_coord=codeCoordinate(fire_coord.x, fire_coord.y);\r\n\r\n      //\r\n      //let messages2 = [...this.state.messages];\r\n      //messages2.push({text: alphabetical_coord, mine: false});\r\n      //this.setState({messages: messages2});\r\n\r\n      if (this.fireMyBoard(alphabetical_coord))\r\n      {\r\n        // если попал, проверяем, победа это или запускаем следующий ход оппонента\r\n        let playerLivesCount=0;\r\n        for (let y = 0; y < 10; y++) {\r\n          for (let x = 0; x < 10; x++) {\r\n            // если туда еще не стреляли\r\n            if (!field[y][x].shot&&field[y][x].containsShip)\r\n              playerLivesCount++;\r\n          }\r\n        }\r\n        if (playerLivesCount>0)\r\n          setTimeout(() => this.processEnemyMove(), 1200);\r\n        else\r\n          this.setState({...this.state, gameOver: true, youWin: false});\r\n        return;\r\n      }\r\n    }\r\n    // В остальных случаях ход переходит к игроку\r\n    this.setState({...this.state, enemyTurn: false});\r\n  }\r\n\r\n\r\n  /*\r\n\r\n  const [character, setCharacter] = useState('sber' as AssistantCharacterType);\r\n\r\n  const [note, setNote] = useState(\"\");\r\n\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [appState, dispatch] = useReducer(reducer, initialState );\r\n\r\n  \r\n  const assistantStateRef = useRef<AssistantAppState>();\r\n  const assistantRef = useRef<ReturnType<typeof createAssistant>>();\r\n\r\n  useEffect(() => {\r\n\r\n    dispatch({ type: \"init\"});\r\n\r\n    assistantRef.current = initializeAssistant(() => assistantStateRef.current);\r\n    // type='character', character='sber'\r\n    assistantRef.current.on('data', ({ type, character, navigation, action }: any) => {\r\n      if (character)\r\n        // 'sber' | 'eva' | 'joy';\r\n        setCharacter(character.id);\r\n      //if (navigation)\r\n      if (action)\r\n      {\r\n        if (action.type==='lets_fire')\r\n        {\r\n          let coord=decodeCoordinate(action.coord_str);\r\n          if (coord)\r\n          {\r\n          }\r\n        }\r\n        dispatch(action);\r\n      }\r\n  });\r\n}, []);\r\n    // assistantRef.current.on(\"data\", ({ type, character, action }: any) => {\r\n    assistantRef.current.on(\"data\", ({ action }: any) => {\r\n      if (action) {\r\n        dispatch(action);\r\n        // TODO Тест\r\n        if (action.type==='lets_fire')\r\n        {\r\n          let coord=decodeCoordinate(action.coord_str);\r\n          if (coord)\r\n          {\r\n            // Тут он скажет, что попал\r\n            doneNote(\"Test!!!!\");\r\n\r\n        \r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n  }, []);\r\n\r\n  // Здесь была передача текущего состояния в смартап\r\n  // (где оно там используется, я пока не увидел, да и не смотрел)\r\n  useEffect(() => {\r\n    assistantStateRef.current = {\r\n      item_selector: {\r\n        items: appState.notes.map(({ id, title }, index) => ({\r\n          number: index + 1,\r\n          id,\r\n          title,\r\n        })),\r\n      },\r\n    };\r\n  }, [appState]);\r\n  */\r\n\r\n  _renderResult() {\r\n\r\n    //const { game, playerId, winnerId } = this.props;\r\n    const {youWin} = this.state;\r\n\r\n    const message = youWin ? 'Вы победили!' : 'Вы потерпели крушение, сухопутный!';\r\n\r\n    //setDocumentTitle(`${message} · #${game.id}`);\r\n\r\n    return (\r\n      <div id=\"game_result\">\r\n        <header>\r\n        {/*<Logo/>*/}\r\n          <h1>Игра окончена</h1>\r\n          <p>{message}</p>\r\n        </header>\r\n        {/*<Link to=\"/\">Back to home</Link>*/}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _renderOpponentBoard() {\r\n    //const { dispatch, game, gameChannel, playerId, currentTurn, readyForBattle } = this.props;\r\n\r\n    /*\r\n    if (!readyForBattle) return (\r\n        <Instructions\r\n            readyForBattle={readyForBattle}\r\n            playerIsAttacker={playerId === game.attacker}/>\r\n    );\r\n     */\r\n\r\n    //const opponentBoard = this.state.opponent_board_0;\r\n    // а вот через data к ним можно бы обратиться только внутри OpponentBoard\r\n    const remaining_hit_points = this.state.opponent_board.remaining_hit_points;\r\n\r\n    return (\r\n      <div id=\"opponents_board_container\">\r\n        <header><h2>Поле для стрельбы</h2></header>        \r\n        <OpponentBoard\r\n          //dispatch={dispatch}\r\n          //gameChannel={gameChannel}\r\n          data={this.state.opponent_board}\r\n          showHidden={this.state.showHidden}\r\n          //playerId={playerId}\r\n          //currentTurn={currentTurn}\r\n          //onClickBoard={() => dispatch({ type: \"add_note\", note: \"123\" })}\r\n          onClickBoard={(x:any, y:any) => this.myDispatch({ type: \"lets_fire\", coord_str: codeCoordinate(x,y)})}\r\n        />\r\n        <p>Попаданий до победы: {remaining_hit_points}</p>\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n\r\n  // 559x568, 768x400, 959x400, 1920x1080\r\n  _renderGameContent() {\r\n    if (this.state.gameOver) return this._renderResult();\r\n\r\n    return (\r\n      <section id=\"main_section\">\r\n        {\r\n          <Header\r\n          //game={GameShowView}\r\n          //playerId={playerId}\r\n          enemyTurn={this.state.enemyTurn}\r\n          respectfulAppeal={this.state.respectfulAppeal}\r\n          >\r\n          </Header>\r\n        }\r\n        <section id=\"boards_container\">\r\n          <div id=\"my_board_container\">\r\n            <header><h2>Свои корабли</h2></header>\r\n            <MyBoard\r\n              //dispatch={dispatch}\r\n              //gameChannel={gameChannel}\r\n              //selectedShip={selectedShip}\r\n              data={this.state.my_board}\r\n            />\r\n          </div>\r\n          {\r\n            this._renderOpponentBoard()\r\n          }\r\n        </section>\r\n      </section>\r\n    );\r\n\r\n  }\r\n\r\n  // done в оригинале\r\n  //const doneNote = (title: string) => {\r\n  //  assistantRef.current?.sendData({ action: { action_id: 'fireHit', parameters: { title } } });\r\n//};\r\n\r\n\r\nrender() {\r\n  return (\r\n    <AppStyled>\r\n    {/* Используем глобальные react-компоненты один раз */}\r\n    <TypoScale />\r\n    <DocStyles />\r\n    {(() => {\r\n                switch (this.state.character) {\r\n                    case 'sber':\r\n                        return <ThemeBackgroundSber />;\r\n                    case 'eva':\r\n                        return <ThemeBackgroundEva />;\r\n                    case 'joy':\r\n                        return <ThemeBackgroundJoy />;\r\n                    default:\r\n                        return;\r\n                }\r\n            })()}    \r\n    {/*<Theme />*/}\r\n    {/*<Button onClick={() => doneNote(\"Test!\")}>Normal Button</Button>*/}\r\n    <main id=\"game_show\" className=\"view-container\">\r\n      {this._renderGameContent()}\r\n      {/*\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          dispatch({ type: \"add_note\", note });\r\n          setNote(\"\");\r\n        }}\r\n      >\r\n        <input\r\n          className=\"add-note\"\r\n          type=\"text\"\r\n          placeholder=\"Add Note\"\r\n          value={note}\r\n          onChange={({ target: { value } }) => setNote(value)}\r\n          required\r\n          autoFocus\r\n        />\r\n      </form>\r\n      <ul className=\"notes\">\r\n        {appState.notes.map((note, index) => (\r\n          <li className=\"note\" key={note.id}>\r\n            <span>\r\n              <span style={{ fontWeight: \"bold\" }}>{index + 1}. </span>\r\n              <span\r\n                style={{\r\n                  textDecorationLine: note.completed ? \"line-through\" : \"none\",\r\n                }}\r\n              >\r\n                {note.title}\r\n              </span>\r\n            </span>\r\n            <input\r\n              className=\"done-note\"\r\n              type=\"checkbox\"\r\n              checked={note.completed}\r\n              onChange={() => dispatch({ type: \"done_note\", id: note.id })}\r\n            />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      */}\r\n    </main>\r\n    </AppStyled>\r\n  );\r\n}\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}