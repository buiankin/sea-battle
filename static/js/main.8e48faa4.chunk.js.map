{"version":3,"sources":["constants/index.js","components/header.js","constants/messages.js","components/board.js","components/my_board.js","components/opponent_board.js","utils/placeShip.js","utils/Common.js","utils/checkPlaceShip.js","utils/standardShipsSet.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","id","this","_titleText","_messageText","React","Component","letters","Board","props","data","grid","rows","_buildRowHeader","y","cells","className","x","push","_renderCell","value","key","classes","_cellId","_cellClasses","onClick","_handleCellClick","onDoubleClick","e","preventDefault","onMouseOver","_handleCellMouseOver","onMouseOut","_handleCellMouseOut","_cellValue","values","i","_boardClasses","_renderRows","MyBoard","_toggleCellClasses","selectedShip","classnames","pointer","cell","ship","Constants","ref","orientation","size","inbounds","overlapping","coords","OpponentBoard","onClickBoard","playerId","currentTurn","hit","field","direction","startSquare","containsShip","shipId","getRandomInt","min","max","Math","ceil","floor","random","codeCoordinate","decodeCoordinate","s","result","s2","replace","toUpperCase","length","substring","includes","parseInt","offsets","j","Ship","incrementId","hitpoints","latestId","placeVarious","enemyField","shot","isShipVisible","variableSet","l","checkPlaceShip","placeShip","AppStyled","styled","div","body1","TypoScale","createGlobalStyle","sberBox","DocStyles","text","background","gradient","ThemeBackgroundEva","darkEva","ThemeBackgroundSber","darkSber","ThemeBackgroundJoy","darkJoy","App","state","assistant","assistantStateRef","createRef","getBoardInitialState","character","on","type","action","navigation","setState","myDispatch","oldProps","initial_myField","Array","myShips","initial_enemyField","enemyShips","val_in_line","enemy_val_in_line","forEach","ship0","my_grid","enemy_grid","remaining_hit_points","my_line","enemy_line","fieldVal","fieldVal_0","notes","my_board","myField","opponent_board","myAction","coord","coord_str","sendData","action_id","parameters","newEnemyField","slice","live_parts","setTimeout","processEnemyMove","alphabetical_coord","coordinate","offsets4","primary_area","from","_","fill","live_ships","Set","add","_x","_y","primary_targets","targets","canFire","has","fire_coord","fireMyBoard","href","gameOver","_renderResult","_renderOpponentBoard","_renderGameContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e48faa4.chunk.js","sourcesContent":["export default {\n\n  // Session\n  SESSION_SET_PLAYER: 'SESSION_SET_PLAYER',\n\n  //  Home\n  HOME_NEW_GAME: 'HOME_NEW_GAME',\n  HOME_SET_CURRENT_GAMES: 'HOME_SET_CURRENT_GAMES',\n\n  // Game\n  GAME_SET_CHANNEL: 'GAME_SET_CHANNEL',\n  GAME_PLAYER_JOINED: 'GAME_PLAYER_JOINED',\n  GAME_PLAYER_LEFT: 'GAME_PLAYER_LEFT',\n  GAME_SET_GAME: 'GAME_SET_GAME',\n  GAME_ADD_MESSAGE: 'GAME_ADD_MESSAGE',\n  GAME_SETUP_SELECT_SHIP: 'GAME_SETUP_SELECT_SHIP',\n  GAME_OPPONENTS_BOARD_UPDATE: 'GAME_OPPONENTS_BOARD_UPDATE',\n  GAME_RESET: 'GAME_RESET',\n  GAME_OVER: 'GAME_OVER',\n  GAME_ERROR: 'GAME_ERROR',\n\n  //Ships\n  SHIP_ORIENTATION_HORIZONTAL: 'horizontal',\n  SHIP_ORIENTATION_VERTICAL: 'vertical',\n\n  // Boards\n  GRID_VALUE_WATER: '·',\n  GRID_VALUE_SHIP: '/',\n  GRID_VALUE_WATER_HIT: 'O',\n  GRID_VALUE_SHIP_HIT: '*',\n};\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types'\n//import { setDocumentTitle }   from '../../utils';\n//import MyBoard from \"./my_board\";\n\nexport default class Header extends React.Component {\n\n  componentDidUpdate() {\n    //const { game } = this.props;\n    // TODO\n    //setDocumentTitle(`${this._titleText()} · #${game.id}`);\n  }\n\n  _titleText() {\n    //const { game, playerId, currentTurn, my_board, opponents_board } = this.props;\n    //const { readyForBattle } = game;\n    //let readyForBattle=true;\n\n    /*\n\n    if (!my_board.ready) {\n      return 'Place your ships';\n    } else if (!opponents_board || !opponents_board.ready) {\n      return 'Waiting for opponent';\n    } else if (currentTurn && currentTurn === playerId) {\n      return 'Your turn!';\n    } else if (currentTurn && currentTurn != playerId) {\n      return 'Your opponent\\'s turn!';\n    } else {\n      return 'Let the battle begin';\n    }\n     */\n    return 'Your turn!';\n  }\n\n  _messageText() {\n    /*\n    const { game, playerId, currentTurn } = this.props;\n    const { my_board, opponents_board, readyForBattle } = game;\n\n    if (!my_board.ready) {\n      return 'Use the instructions below';\n    } else if (!opponents_board || !opponents_board.ready) {\n      return 'Battle will start as soon as your opponent is ready';\n    } else if (currentTurn && currentTurn === playerId) {\n      return 'Click on your shooting grid to open fire!';\n    } else if (currentTurn && currentTurn != playerId) {\n      return 'Wait for your opponent to shoot...';\n    } else {\n      return 'Let the battle begin';\n    }\n     */\n    return 'Let the battle begin';\n  }\n\n  render() {\n    return (\n      <header id=\"game_header\">\n        <h1>{this._titleText()}</h1>\n        <p>{this._messageText()}</p>\n      </header>\n    );\n  }\n}\n","\r\nexport const letters = ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ж', 'З', 'И', 'К'];\r\n\r\nexport const hello_messages = ['Привет!'];\r\nexport const hit_messages = ['Неплохо для слепого!'];\r\nexport const miss_messages = ['Мазила!', 'Мимо!', 'Промах!'];\r\nexport const kill_messages = ['Убил!'];\r\nexport const dont_understand = ['Моя твоя не понимай!'];\r\n\r\n","import React, {PropTypes} from 'react';\nimport classnames         from 'classnames';\nimport Constants from '../constants';\nimport {letters} from '../constants/messages';\n//import { setGame }        from '../../actions/game';\n\nexport default class Board extends React.Component {\n\n  constructor(props)\n  {\n    super(props);\n  }\n\n  _renderRows(data) {\n\n    const { grid } = data;\n\n    let rows = [this._buildRowHeader()];\n\n    for (let y = 0; y < 10; y++) {\n      let cells = [<div key={`header-${y}`} className=\"header cell\">{y + 1}</div>];\n\n      for (let x = 0; x < 10; x++) {\n        //cells.push(this._renderCell(y, x, grid[`${y}${x}`]));\n        // 15.02.2021 у нас это не строка 00, 01, 02 и т.д., а двухмерный массив\n        cells.push(this._renderCell(y, x, grid[y][x]));\n      }\n\n      rows.push(<div className=\"row\" key={y}>{cells}</div>);\n    }\n/*\n      let rows = [this._buildRowHeader()];\n\n      for (let y = 0; y < 10; y++) {\n          let cells = [<div key={`header-${y}`} className=\"header cell\">{y + 1}</div>];\n\n          for (let x = 0; x < 10; x++) {\n              cells.push(this._renderCell(y, x, '*'));\n          }\n\n          rows.push(<div className=\"row\" key={y}>{cells}</div>);\n      }\n*/\n\n\n    return rows;\n  }\n\n  _renderCell(y, x, value) {\n    const key = `${y}${x}`;\n    const id = this._cellId(key);\n    const classes = this._cellClasses(value);\n\n    return (\n      <div\n        id={this._cellId(key)}\n        className={classes}\n        key={key}\n        onClick={this._handleCellClick(y, x, value)}\n        onDoubleClick={(e) => e.preventDefault()}\n        onMouseOver={this._handleCellMouseOver(y, x)}\n        onMouseOut={this._handleCellMouseOut(y, x)}>{this._cellValue(value)}</div>\n    );\n  }\n\n  _buildRowHeader() {\n    let values = [<div key=\"empty\" className=\"header cell\"></div>];\n\n    for (var i = 0; i < 10; ++i) {\n      //  values.push(<div key={i} className=\"header cell\">{String.fromCharCode(i + 65)}</div>);\n      values.push(<div key={i} className=\"header cell\">{letters[i]}</div>);\n    }\n\n\n\n    return (\n      <div key=\"col-headers\" className=\"row\">\n        {values}\n      </div>\n    );\n  }\n\n  render() {\n      // 14.02.2012 TODO\n    const { data } = this.props;\n    //if (!data) return false;\n\n    const classes = this._boardClasses();\n\n    return (\n      <div className={classes}>\n        {this._renderRows(data)}\n      </div>\n    );\n  }\n}\n","import React, {PropTypes} from 'react';\nimport classnames         from 'classnames';\nimport Board              from './board';\nimport Constants          from '../constants';\n//import { setGame }        from '../../actions/game';\n//import { setError }       from '../../actions/game';\n\nexport default class MyBoard extends Board {\n\n    _handleCellClick(y, x, value) {\n    //const { selectedShip, gameChannel, dispatch } = this.props;\n    //const key = `${y}${x}`;\n\n    // 14.02.2021 Добавил\n    //const ready=true;\n    //\n\n    // Это было в actions\n    //  function setGame(game) {\n    //    return {\n    //      type: Constants.GAME_SET_GAME,\n    //      game: game,\n    //    };\n    //  }\n\n\n    return (e) => {\n      //if (selectedShip.id === null) return false;\n      if (value != Constants.GRID_VALUE_WATER) return false;\n\n      //const ship = {\n      //  x: x,\n      //  y: y,\n      //  size: selectedShip.size,\n      //  orientation: selectedShip.orientation,\n      //};\n\n      // TODO 08.02.2021\n      //gameChannel.push('game:place_ship', { ship: ship })\n      //.receive('ok', (payload) => dispatch(setGame(payload.game)));\n      //.receive('error', (payload) => dispatch(setError(payload.reason)));\n\n      return false;\n\n    };\n  }\n\n  _handleCellMouseOver(y, x) {\n    return this._toggleCellClasses(y, x);\n  }\n\n  _handleCellMouseOut(y, x) {\n    return this._toggleCellClasses(y, x);\n  }\n\n  _toggleCellClasses(y, x) {\n      // TODO это расстановка\n      /*\n    const { selectedShip } = this.props;\n\n    if (selectedShip.size === 0) return false;\n\n    const { size, orientation } = selectedShip;\n\n    const className = this._validCoords(y, x, orientation, size) ? 'ship-shape' : 'ship-shape-invalid';\n\n    return (e) => {\n      for (var i = 0; i < size; i++) {\n        const coords = orientation === 'horizontal' ? `${y}${x + i}` : `${y + i}${x}`;\n        let cell = document.getElementById(coords);\n        if (!cell) break;\n        cell.classList.toggle(className);\n      }\n    };\n       */\n  }\n\n  _cellValue(value) {\n    return false;\n  }\n\n  _boardClasses() {\n    const { selectedShip } = this.props;\n\n    return classnames({\n      grid: true,\n      pointer: selectedShip && selectedShip.id != null,\n    });\n  }\n\n  _cellClasses(value) {\n    return classnames({\n      cell: true,\n      ship: value === Constants.GRID_VALUE_SHIP,\n      'ship-hit': value === Constants.GRID_VALUE_SHIP_HIT,\n      'water-hit': value === Constants.GRID_VALUE_WATER_HIT,\n    });\n  }\n\n  _cellId(ref) {\n    return ref;\n  }\n\n  _validCoords(y, x, orientation, size) {\n    const { data } = this.props;\n    let inbounds;\n\n    if (orientation === 'horizontal') {\n      inbounds = (x + size) <= 10;\n    } else {\n      inbounds = (y + size) <= 10;\n    }\n\n    let overlapping = false;\n\n    for (var i = 0; i < size; i++) {\n      const coords = orientation === 'horizontal' ? `${y}${x + i}` : `${y + i}${x}`;\n      if (data.grid[coords] != Constants.GRID_VALUE_WATER) {\n        overlapping = true;\n        break;\n      }\n    }\n\n    return inbounds && !overlapping;\n  }\n}\n","import React, {PropTypes} from 'react';\nimport classnames         from 'classnames';\nimport Board              from './board';\nimport Constants          from '../constants';\n//import { setGame }        from '../../actions/game';\n\nexport default class OpponentBoard extends Board {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  _handleCellClick(y, x, value) {\n    //const { gameChannel, currentTurn, playerId, dispatch } = this.props;\n\n    //if (currentTurn !== playerId) return false;\n\n    //const key = `${y}${x}`;\n\n    // Это было в actions\n    //function setGame(game) {\n    //  return {\n    //    type: Constants.GAME_SET_GAME,\n    //    game: game,\n    //  };\n    //}\n\n    return (e) => { \n      this.props.onClickBoard(x, y);\n    }\n\n\n    //return (e) => {\n    //  if (value != Constants.GRID_VALUE_WATER) return false;\n\n      //gameChannel.push('game:shoot', { y: y, x: x })\n      //.receive('ok', (payload) => {\n      //  dispatch(setGame(payload.game));\n      //})\n      //.receive('error', (payload) => console.log(payload));\n\n\n    //};\n  }\n\n  _handleCellMouseOver(y, x) {\n    return false;\n  }\n\n  _cellValue(value) {\n    return '';\n  }\n\n  _boardClasses() {\n    const { playerId, currentTurn } = this.props;\n\n    return classnames({\n      grid: true,\n      pointer: playerId === currentTurn,\n    });\n  }\n\n  _cellClasses(value) {\n    return classnames({\n      cell: true,\n      // TODO только во время отладки\n      ship: value === Constants.GRID_VALUE_SHIP,\n      //\n      hit: value === Constants.GRID_VALUE_SHIP_HIT,\n      'water-hit': value === Constants.GRID_VALUE_WATER_HIT,\n    });\n  }\n\n  _cellId(ref) {\n    return false;\n  }\n\n  _handleCellMouseOut(e) {\n    return false;\n  }\n}\n","// небольшая функция-сниппет, которая добавляет корабль на поле\n// сдвиг на единицу появился из-за отсчета индекса массива с нуля\n\nexport default (field, ship) => {\n    switch(ship.direction) {\n        case 'right': \n        for (let i = ship.startSquare.x - 1; i < ship.startSquare.x - 1 + ship.size; i++) {\n            field[ship.startSquare.y - 1][i].containsShip = true;\n            field[ship.startSquare.y - 1][i].shipId = ship.id;\n        }\n        break;\n        case 'down': \n        for (let i = ship.startSquare.y - 1; i < ship.startSquare.y - 1 + ship.size; i++) {\n            field[i][ship.startSquare.x - 1].containsShip = true;\n            field[i][ship.startSquare.x - 1].shipId = ship.id;\n        }\n        break;\n        default:\n    }\n}\n","\r\nimport { letters } from '../constants/messages';\r\n\r\n\r\nexport function getRandomArbitrary(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function codeCoordinate(x, y)\r\n{\r\n  return letters[x]+(y+1);\r\n}\r\n\r\n\r\nexport function decodeCoordinate(s)\r\n{\r\n  let result=null;\r\n  let y=-1;\r\n  let s2=s.replace(\"-\", \" \").replace(\" \", \"\").toUpperCase();\r\n  if (s2.length===3&&s2.substring(1)===\"10\")\r\n  {\r\n    y=9;\r\n  } else if (s2.length===2) {\r\n    if ('0123456789'.includes(s2.substring(2)))\r\n      y=parseInt(s2.substring(1))-1;\r\n  }\r\n  switch (s2.substring(0,1))\r\n  {\r\n    case 'А':\r\n      result={x:0, y:y};\r\n      break;\r\n    case 'Б':\r\n      result={x:1, y:y};\r\n      break;\r\n    case 'В':\r\n      result={x:2, y:y};\r\n      break;\r\n    case 'Г':\r\n      result={x:3, y:y};\r\n      break;\r\n    case 'Д':\r\n      result={x:4, y:y};\r\n      break;\r\n    case 'Е':\r\n      result={x:5, y:y};\r\n      break;\r\n    case 'Ж':\r\n      result={x:6, y:y};\r\n      break;\r\n    case 'З':\r\n      result={x:7, y:y};\r\n      break;\r\n    case 'И':\r\n      result={x:8, y:y};\r\n      break;\r\n    case 'К':\r\n      result={x:9, y:y};\r\n      break;\r\n                                                                \r\n  }\r\n  return result;\r\n}","\nexport default (field, ship) => {\n    const offsets=[{x:-1,y:-1}, {x:0,y:-1}, {x:1,y:-1},\n        {x:-1,y:0}, {x:0,y:0}, {x:1,y:0},\n        {x:-1,y:1}, {x:0,y:1}, {x:1,y:1},\n    ];\n    switch(ship.direction) {\n        case 'right':\n            for (let i = ship.startSquare.x - 1; i < ship.startSquare.x - 1 + ship.size; i++) {\n                //field[ship.startSquare.y - 1][i].containsShip = true;\n                //field[ship.startSquare.y - 1][i].shipId = ship.id;\n                for (let j=0; j<offsets.length; j++)\n                {\n                    let y=offsets[j].y+ship.startSquare.y - 1;\n                    let x=offsets[j].x+i;\n                    if (x<0||y<0||x>=10|y>=10)\n                    {\n                        // корабль находится в углу поля, там других кораблей нет\n                    } else {\n                        if (field[y][x].containsShip)\n                            return false;\n                    }\n                }\n\n            }\n            break;\n        case 'down':\n            for (let i = ship.startSquare.y - 1; i < ship.startSquare.y - 1 + ship.size; i++) {\n                //field[i][ship.startSquare.x - 1].containsShip = true;\n                //field[i][ship.startSquare.x - 1].shipId = ship.id;\n                for (let j=0; j<offsets.length; j++)\n                {\n                    let y=offsets[j].y+i;\n                    let x=offsets[j].x+ship.startSquare.x - 1;\n                    if (x<0||y<0||x>=10|y>=10)\n                    {\n                        // корабль находится в углу поля, там других кораблей нет\n                    } else {\n                        if (field[y][x].containsShip)\n                            return false;\n                    }\n                }\n\n            }\n            break;\n        default:\n    }\n    return true;\n}","// компонент, который создает и экспортирует стандартный набор кораблей\n// направление кораблю задается для того, чтобы можно было определить, в какую сторону его рисовать из стартовой точки\n// Размещать корабли можно либо вертикально, либо горизонтально, были выбраны направления вправо(right) и вниз(down), \n// поскольку они совпадают с положительными направлениеми координатных осей\n\nimport {getRandomInt} from './Common'\nimport placeShip from \"./placeShip\";\nimport checkPlaceShip from \"./checkPlaceShip\";\n\nclass Ship {\n    constructor(size, startSquare, direction) {\n        this.size = size;\n        this.startSquare = startSquare;\n        this.direction = direction;\n        this.id = Ship.incrementId();\n        this.hitpoints = this.size;\n    }\n\n    static incrementId() {\n        if (!this.latestId) {\n            this.latestId = 1;\n        } else {\n            this.latestId++;\n        }\n        return this.latestId\n    }\n}\n\n\nexport function placeVarious()\n{\n    let enemyField = [];\n\n    // первоначальное (пустое) состояние поля\n    for (let i = 0; i < 10; i++) {\n        enemyField.push([]);\n    }\n\n    for (let i = 0; i < 10; i++) {\n        for (let j = 0; j < 10; j++) {\n            enemyField[i].push({\n                x: j,\n                y: i,\n                containsShip: false,\n                shot: false,\n                isShipVisible: false,\n                shipId: null,\n            });\n        }\n    }\n\n\n    let variableSet = [];\n    // i-порядок расстановки (оно же количество короблей такой длины)\n    // и соответственно длина на каждом уровне  5-i\n    for (let i=1; i<=4; i++)\n    {\n        for (let j=1; j<=i; j++)\n        {\n            // длина корабля\n            let l=5-i;\n            let ship, x, y;\n            for(;;) {\n                x = getRandomInt(1, 10 - l + 1);\n                y = getRandomInt(1, 10);\n\n                let direction=Math.random();\n                if (direction>= 0.5) {\n                    ship = new Ship(l, {y: y, x: x}, 'right');\n                } else {\n                    ship = new Ship(l, {y: x, x: y}, 'down');\n                }\n                if (checkPlaceShip(enemyField, ship))\n                   break;\n            }\n            placeShip(enemyField, ship);\n            variableSet.push(ship);\n        }\n\n    }\n    return variableSet;\n}\n\nexport default placeVarious;","import React, {\r\n  FC,\r\n  memo,\r\n  useReducer,\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  RefObject,\r\n} from 'react';\r\n\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n  AssistantAppState,\r\n  AssistantSmartAppData,\r\n  AssistantCharacterType\r\n} from \"@sberdevices/assistant-client\";\r\n\r\n//import  {Link} from 'react-router-dom';\r\n\r\nimport Constants from './constants';\r\nimport Header from './components/header'\r\nimport Chat from './components/chat'\r\nimport MyBoard from './components/my_board'\r\nimport OpponentBoard from './components/opponent_board';\r\n\r\nimport placeShip from './utils/placeShip';\r\nimport placeVarious from './utils/standardShipsSet';\r\n\r\n\r\n// Это не обязательно, т.к. все в в index на самом деле\r\n//import './App.css';\r\n\r\nimport { getRandomInt, codeCoordinate, decodeCoordinate} from './utils/Common';\r\nimport { ContextApp, initialState, reducer } from \"./store\";\r\n\r\n// createGlobalStyle нужен для создания глобальных стилей\r\nimport styled, { createGlobalStyle, css } from 'styled-components';\r\n\r\n// получаем значение для целевой платформы\r\nimport { sberBox } from '@sberdevices/plasma-tokens/typo';\r\n// получаем стилевые объекты для нашего интерфейса\r\nimport { body1, headline2 } from '@sberdevices/plasma-tokens';\r\n\r\n// получаем тему персонажа\r\nimport { darkEva, darkSber, darkJoy } from '@sberdevices/plasma-tokens/themes';\r\n\r\n// получаем цвета для нашего интерфейса\r\nimport { text, background, gradient } from '@sberdevices/plasma-tokens';\r\n\r\nimport { Button } from '@sberdevices/ui';\r\nimport { createArrayTypeNode } from 'typescript';\r\n\r\n//import { IconDownload } from '@sberdevices/plasma-icons';\r\n\r\n\r\n\r\nconst AppStyled = styled.div`\r\n    padding: 30px;\r\n    ${body1}\r\n`;\r\n\r\n// создаем react-компонент c глобальными стилями типографики\r\nconst TypoScale = createGlobalStyle(sberBox);\r\n\r\n// создаем react-компонент для подложки\r\nconst DocStyles = createGlobalStyle`\r\n    /* stylelint-disable-next-line selector-nested-pattern */\r\n    html {\r\n        color: ${text};\r\n        background-color: ${background};\r\n        background-image: ${gradient};\r\n\r\n        /** необходимо залить градиентом всю подложку */\r\n        min-height: 100vh;\r\n    }\r\n`;\r\n// создаем react-компонент для персонажа\r\n//const Theme = createGlobalStyle(darkJoy);\r\n//const Theme = createGlobalStyle(lightJoy);\r\n\r\nconst ThemeBackgroundEva = createGlobalStyle(darkEva);\r\nconst ThemeBackgroundSber = createGlobalStyle(darkSber);\r\nconst ThemeBackgroundJoy = createGlobalStyle(darkJoy);\r\n\r\n// Плазма\r\n//https://plasma.sberdevices.ru/current/?path=/docs/about--page\r\n\r\n\r\nconst initializeAssistant = (getState: any) => {\r\n  console.log('process.env.NODE_ENV=');\r\n  console.log(process.env.NODE_ENV);\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    return createSmartappDebugger({\r\n      token: process.env.REACT_APP_TOKEN ?? \"\",\r\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\r\n      getState,\r\n    });\r\n  }\r\n\r\n  return createAssistant({ getState });\r\n};\r\n\r\n\r\n\r\n\r\nfunction handleClickOpponentBoard(x: any, y: any) {\r\n  // TODO\r\n  //alert('You fire ' + x + \"/\" + y);\r\n  //this.state.opponent_board.grid[y][x] = Constants.GRID_VALUE_SHIP_HIT;\r\n\r\n  /*\r\n\r\n  const alphabetical_coord=this.codeCoordinate(x, y);\r\n\r\n  let messages2 = [...this.state.messages];\r\n  messages2.push({text: alphabetical_coord, mine: true});\r\n  this.setState({messages: messages2});\r\n\r\n  let fire_registered=false;\r\n\r\n  let field=this.state.enemyField[y][x];\r\n  if (field.containsShip)\r\n  {\r\n    // Попали в корабль\r\n    if (!field.shot)\r\n    {\r\n      // До этого в это поле не попадали\r\n      fire_registered=true;\r\n      let newEnemyField=this.state.enemyField.slice();\r\n      newEnemyField[y][x].shot=true;\r\n      let shipId=field.shipId;\r\n      // Проверим, есть ли еще не подбитые его части\r\n      let live_parts=0;\r\n      for (let y = 0; y < 10; y++) {\r\n        for (let x = 0; x < 10; x++) {\r\n          if (newEnemyField[y][x].containsShip && newEnemyField[y][x].shipId===shipId)\r\n          {\r\n            if (!newEnemyField[y][x].shot)\r\n              live_parts++;\r\n          }\r\n        }\r\n      }\r\n      // TODO если корабль полностью подбит, рисовать его как-то по-другому\r\n  \r\n      let grid=this.state.opponent_board.grid.slice();\r\n      grid[y][x] = Constants.GRID_VALUE_SHIP_HIT;\r\n      let remaining_hit_points=this.state.opponent_board.remaining_hit_points;\r\n      remaining_hit_points--;\r\n      this.setState({ enemyField: newEnemyField, opponent_board: { ...this.state.opponent_board, grid: grid, remaining_hit_points: remaining_hit_points} });\r\n    } else {\r\n      // Повторное попадание\r\n    }\r\n  } else {\r\n    // Попали в воду\r\n    let grid=this.state.opponent_board.grid.slice();\r\n    if (grid[y][x] === Constants.GRID_VALUE_WATER)\r\n    {\r\n      // До этого туда не стреляли\r\n      fire_registered=true;\r\n      // хотя это бы и не обязательно делать (заполнять enemyField для воды), все равно попадание у нас контролируется по-другому,\r\n      // но для корректности данных лучше так сделать\r\n      let newEnemyField=this.state.enemyField.slice();\r\n      newEnemyField[y][x].shot=true;\r\n      //\r\n      grid[y][x] = Constants.GRID_VALUE_WATER_HIT;\r\n      this.setState({ enemyField: newEnemyField, opponent_board: { ...this.state.opponent_board, grid: grid} });\r\n    }\r\n  }\r\n\r\n  //if (fire_registered)\r\n  // this.processEnemyMove();\r\n  */\r\n}\r\n\r\nexport class App extends React.Component<any, any> {\r\n\r\n  //assistantRef = React.createRef<ReturnType<typeof createAssistant>>();\r\n  //assistantRef = React.createRef<AssistantSmartAppData>();\r\n  //private assistantRef :RefObject<ReturnType<typeof createAssistant>>;\r\n  private assistant :any = null;\r\n  \r\n  assistantStateRef = React.createRef<AssistantAppState>();\r\n  //assistant: AssistantAppState=null;\r\n\r\n  constructor(props:any, state:any) {\r\n    super(props);\r\n    this.state=this.getBoardInitialState();\r\n    this.state={...this.state, character: 'sber'};\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    // TODO\r\n    //this.assistant = initializeAssistant(() => this.assistantStateRef.current);\r\n\r\n    // type='character', character='sber'\r\n    this.assistant?.on('data', ({ type, character, navigation, action }: any) => {\r\n      if (character)\r\n        // 'sber' | 'eva' | 'joy';\r\n        this.setState({...this.state, character: character.id});\r\n      //if (navigation)\r\n      if (action)\r\n      {\r\n        /*\r\n        if (action.type==='lets_fire')\r\n        {\r\n          let coord=decodeCoordinate(action.coord_str);\r\n          if (coord)\r\n          {\r\n          }\r\n        }\r\n        */\r\n       this.myDispatch(action);\r\n      }\r\n  });\r\n\r\n\r\n  }\r\n\r\n  componentDidUpdate(oldProps: any) {\r\n  }\r\n  \r\n  getBoardInitialState()\r\n  {\r\n    let initial_myField = Array(0);\r\n    let myShips = placeVarious();\r\n  \r\n    let initial_enemyField = Array(0);\r\n    let enemyShips = placeVarious();\r\n  \r\n  \r\n    // первоначальное (пустое) состояние поля\r\n    //for (let i = 0; i < 10; i++) {\r\n    //  initial_myField.push([]);\r\n    //  initial_enemyField.push([]);\r\n    //}\r\n  \r\n    for (let i = 0; i < 10; i++) {\r\n      let val_in_line = [];\r\n      let enemy_val_in_line = [];\r\n  \r\n      for (let j = 0; j < 10; j++) {\r\n        val_in_line.push({\r\n          x: j,\r\n          y: i,\r\n          containsShip: false,\r\n          shot: false,\r\n          isShipVisible: false,\r\n          shipId: null,\r\n        });\r\n  \r\n        enemy_val_in_line.push({\r\n          x: j,\r\n          y: i,\r\n          containsShip: false,\r\n          shot: false,\r\n          isShipVisible: false,\r\n          shipId: null,\r\n        });\r\n      }\r\n  \r\n      initial_myField.push(val_in_line);\r\n      initial_enemyField.push(enemy_val_in_line);\r\n    }\r\n  \r\n      // расставляем стандартный набор кораблей\r\n      myShips.forEach((ship: any) => {\r\n        placeShip(initial_myField, ship)\r\n      });\r\n      enemyShips.forEach((ship0: any) => {\r\n        placeShip(initial_enemyField, ship0)\r\n      });\r\n  \r\n  \r\n    let my_grid = [];\r\n    let enemy_grid = [];\r\n  \r\n    // Заполняем из наших массивов\r\n    let remaining_hit_points = 0;\r\n    for (let y = 0; y < 10; y++) {\r\n      let my_line = [];\r\n      let enemy_line = [];\r\n      for (let x = 0; x < 10; x++) {\r\n        // Наши корабли\r\n        let fieldVal = initial_myField[y][x];\r\n        let fieldVal_0 = fieldVal.shot ? Constants.GRID_VALUE_WATER_HIT : Constants.GRID_VALUE_WATER;\r\n        if (fieldVal.containsShip)\r\n          fieldVal_0 = fieldVal.shot ? Constants.GRID_VALUE_SHIP_HIT : Constants.GRID_VALUE_SHIP;\r\n        my_line.push(fieldVal_0);\r\n        // Корабли оппонента\r\n        fieldVal = initial_enemyField[y][x];\r\n        fieldVal_0 = fieldVal.shot ? Constants.GRID_VALUE_WATER_HIT : Constants.GRID_VALUE_WATER;\r\n        if (fieldVal.containsShip) {\r\n          fieldVal_0 = fieldVal.shot ? Constants.GRID_VALUE_SHIP_HIT : Constants.GRID_VALUE_SHIP;\r\n          remaining_hit_points++;\r\n        }\r\n        enemy_line.push(fieldVal_0);\r\n      }\r\n  \r\n      my_grid.push(my_line);\r\n      enemy_grid.push(enemy_line);\r\n  \r\n    }\r\n  \r\n    let initial_my_board = { grid: my_grid };\r\n    let initial_opponent_board = { grid: enemy_grid, remaining_hit_points};\r\n  \r\n    return {\r\n      notes: [],\r\n      my_board: initial_my_board,\r\n      myField: initial_myField,\r\n      opponent_board: initial_opponent_board,\r\n      enemyField: initial_enemyField\r\n    };\r\n\r\n  }\r\n\r\n  // { type: \"lets_fire\", coord_str: codeCoordinate(x,y)})\r\n  myDispatch(myAction: any)\r\n  {\r\n    if (myAction.type==='lets_fire')\r\n    {\r\n      let fire_registered=false;\r\n      let coord=decodeCoordinate(myAction.coord_str);\r\n      if (coord)\r\n      {\r\n        let x=coord.x, y=coord.y;\r\n\r\n        let field=this.state.enemyField[y][x];\r\n        if (field.containsShip)\r\n        {\r\n          // Попали в корабль\r\n          if (!field.shot)\r\n          {\r\n            // До этого в это поле не попадали\r\n            fire_registered=true;\r\n            let newEnemyField=this.state.enemyField.slice();\r\n            newEnemyField[y][x].shot=true;\r\n            let shipId=field.shipId;\r\n            // Проверим, есть ли еще не подбитые его части\r\n            let live_parts=0;\r\n            for (let y = 0; y < 10; y++) {\r\n              for (let x = 0; x < 10; x++) {\r\n                if (newEnemyField[y][x].containsShip && newEnemyField[y][x].shipId===shipId)\r\n                {\r\n                  if (!newEnemyField[y][x].shot)\r\n                    live_parts++;\r\n                }\r\n              }\r\n            }\r\n            // TODO если корабль полностью подбит, рисовать его как-то по-другому\r\n        \r\n            let grid=this.state.opponent_board.grid.slice();\r\n            grid[y][x] = Constants.GRID_VALUE_SHIP_HIT;\r\n            //setState({ enemyField: newEnemyField, opponent_board: { ...appState.opponent_board, grid: grid, remaining_hit_points: remaining_hit_points} });\r\n            this.setState({...this.state,\r\n            opponent_board: {grid: grid, remaining_hit_points: this.state.opponent_board.remaining_hit_points-1},\r\n            enemyField: newEnemyField\r\n            });\r\n            if (live_parts>0)\r\n              this.assistant?.sendData({ action: { action_id: 'fireHit', parameters: { coord: myAction.coord_str} } });\r\n            else\r\n              this.assistant?.sendData({ action: { action_id: 'fireDone', parameters: { coord: myAction.coord_str} } });\r\n          } else {\r\n            // Повторное попадание\r\n            this.assistant?.sendData({ action: { action_id: 'fireAgain', parameters: { coord: myAction.coord_str} } });\r\n          }\r\n        } else {\r\n          // Попали в воду\r\n          let grid=this.state.opponent_board.grid.slice();\r\n          if (grid[y][x] === Constants.GRID_VALUE_WATER)\r\n          {\r\n            // До этого туда не стреляли\r\n            fire_registered=true;\r\n            // хотя это бы и не обязательно делать (заполнять enemyField для воды), все равно попадание у нас контролируется по-другому,\r\n            // но для корректности данных лучше так сделать\r\n            let newEnemyField=this.state.enemyField.slice();\r\n            newEnemyField[y][x].shot=true;\r\n            //\r\n            grid[y][x] = Constants.GRID_VALUE_WATER_HIT;\r\n            //this.setState({ enemyField: newEnemyField, opponent_board: { ...this.state.opponent_board, grid: grid} });\r\n            this.setState({\r\n              ...this.state,\r\n              opponent_board: { ...this.state.opponent_board, grid: grid}, enemyField: newEnemyField\r\n            });\r\n          }\r\n          this.assistant?.sendData({ action: { action_id: 'fireMiss', parameters: { coord: myAction.coord_str} } });\r\n        }\r\n      }\r\n\r\n      // Теперь он сам стреляет\r\n      setTimeout(() => this.processEnemyMove(), 3000);\r\n\r\n    }\r\n  }\r\n\r\n  fireMyBoard(alphabetical_coord: string)\r\n  {\r\n    const coordinate=decodeCoordinate(alphabetical_coord);\r\n    if (coordinate==null)\r\n      return;\r\n    const x=coordinate.x;\r\n    const y=coordinate.y;\r\n\r\n    let fire_registered=false;\r\n\r\n    let field=this.state.myField[y][x];\r\n    if (field.containsShip)\r\n    {\r\n      // Попали в корабль\r\n      if (!field.shot)\r\n      {\r\n        // До этого в это поле не попадали\r\n        fire_registered=true;\r\n        let newEnemyField=this.state.myField.slice();\r\n        newEnemyField[y][x].shot=true;\r\n        let shipId=field.shipId;\r\n        // Проверим, есть ли еще не подбитые его части\r\n        let live_parts=0;\r\n        for (let y = 0; y < 10; y++) {\r\n          for (let x = 0; x < 10; x++) {\r\n            if (newEnemyField[y][x].containsShip && newEnemyField[y][x].shipId===shipId)\r\n            {\r\n              if (!newEnemyField[y][x].shot)\r\n                live_parts++;\r\n            }\r\n          }\r\n        }\r\n        // TODO если корабль полностью подбит, рисовать его как-то по-другому\r\n    \r\n        let grid=this.state.my_board.grid.slice();\r\n        grid[y][x] = Constants.GRID_VALUE_SHIP_HIT;\r\n        this.setState({ myField: newEnemyField, my_board: { ...this.state.my_board, grid: grid} });\r\n      } else {\r\n        // Повторное попадание\r\n      }\r\n    } else {\r\n      // Попали в воду\r\n      let grid=this.state.my_board.grid.slice();\r\n      if (grid[y][x] === Constants.GRID_VALUE_WATER)\r\n      {\r\n        // До этого туда не стреляли\r\n        fire_registered=true;\r\n        let newEnemyField=this.state.myField.slice();\r\n        newEnemyField[y][x].shot=true;\r\n        grid[y][x] = Constants.GRID_VALUE_WATER_HIT;\r\n        this.setState({ myField: newEnemyField, my_board: { ...this.state.my_board, grid: grid} });\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  processEnemyMove()\r\n  {\r\n    const offsets=[{x:-1,y:-1}, {x:0,y:-1}, {x:1,y:-1},\r\n      {x:-1,y:0}, {x:0,y:0}, {x:1,y:0},\r\n      {x:-1,y:1}, {x:0,y:1}, {x:1,y:1},\r\n    ];\r\n\r\n    const offsets4=[{x:0,y:-1},{x:-1,y:0},{x:1,y:0},{x:0,y:1}];\r\n\r\n    let field=this.state.myField;\r\n    // Первый проход, ищем точки, где рядом есть с попаданиями\r\n    // они будут иметь признак первичных\r\n    // а уже на втором проходе будет происходить поиск, куда можно в принципе выстрелить\r\n    // поэтому если координата будет иметь признак первичной, но стрелять туда нельзя, она в массив не попадет\r\n    let primary_area=Array.from(Array(10), _ => Array(10).fill(0));\r\n    // если в этой координате подбитый корабль\r\n    // найдем, есть ли не подбитые в 4-х направлениях от него\r\n    // и если есть, то это он сам (т.к. нельзя ставить рядом)\r\n    // Заодно заполним список живых кораблей\r\n    let live_ships=new Set();\r\n    for (let y = 0; y < 10; y++) {\r\n      for (let x = 0; x < 10; x++) {\r\n        for (let i=0; i<offsets4.length; i++){\r\n          if (field[y][x].containsShip&&!field[y][x].shot) {\r\n            live_ships.add(field[y][x].shipId);\r\n          }\r\n          let _x=x+offsets4[i].x;\r\n          let _y=y+offsets4[i].y;\r\n          if (_x>=0&&_x<10&&_y>=0&&_y<10&&field[_y][_x].containsShip&&field[_y][_x].shot)\r\n          {\r\n            primary_area[y][x]=1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let primary_targets=[];\r\n    let targets=[];\r\n\r\n    // составим массив координат, куда враг может выстрелить\r\n    for (let y = 0; y < 10; y++) {\r\n      for (let x = 0; x < 10; x++) {\r\n        // если туда еще не стреляли\r\n        let canFire=true;\r\n        if (!field[y][x].shot)\r\n        {\r\n          // и вблизи нет подбитых (полностью) кораблей\r\n          for (let i=0; i<offsets.length; i++){\r\n            let _x=x+offsets[i].x;\r\n            let _y=y+offsets[i].y;\r\n            if (_x>=0&&_x<10&&_y>=0&&_y<10&&field[_y][_x].containsShip&&field[_y][_x].shot)\r\n            {\r\n              if (!live_ships.has(field[_y][_x].shipId))\r\n              {\r\n                canFire=false;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          if (canFire)\r\n          {\r\n            targets.push({y:y, x:x});\r\n            if (primary_area[y][x]===1)\r\n              primary_targets.push({y:y, x:x});\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // На всякий случай проверка, что есть куда выстрелить (по идее в этом случае игра уже закончена)\r\n    if (targets.length>0)\r\n    {\r\n      // Координаты выстрела\r\n      let fire_coord=primary_targets.length>0?primary_targets[getRandomInt(0, primary_targets.length-1)]:targets[getRandomInt(0, targets.length-1)];\r\n\r\n      let alphabetical_coord=codeCoordinate(fire_coord.x, fire_coord.y);\r\n\r\n      //\r\n      //let messages2 = [...this.state.messages];\r\n      //messages2.push({text: alphabetical_coord, mine: false});\r\n      //this.setState({messages: messages2});\r\n\r\n      this.fireMyBoard(alphabetical_coord);\r\n    }\r\n/*     if (primary_targets.length>0)\r\n    {\r\n      let idx=getRandomInt(0, primary_targets.length);\r\n      let fire_coord=primary_targets[idx];\r\n    } else\r\n    {\r\n\r\n    }\r\n */    \r\n  }\r\n\r\n\r\n  /*\r\n\r\n  const [character, setCharacter] = useState('sber' as AssistantCharacterType);\r\n\r\n  const [note, setNote] = useState(\"\");\r\n\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [appState, dispatch] = useReducer(reducer, initialState );\r\n\r\n  \r\n  const assistantStateRef = useRef<AssistantAppState>();\r\n  const assistantRef = useRef<ReturnType<typeof createAssistant>>();\r\n\r\n  useEffect(() => {\r\n\r\n    dispatch({ type: \"init\"});\r\n\r\n    assistantRef.current = initializeAssistant(() => assistantStateRef.current);\r\n    // type='character', character='sber'\r\n    assistantRef.current.on('data', ({ type, character, navigation, action }: any) => {\r\n      if (character)\r\n        // 'sber' | 'eva' | 'joy';\r\n        setCharacter(character.id);\r\n      //if (navigation)\r\n      if (action)\r\n      {\r\n        if (action.type==='lets_fire')\r\n        {\r\n          let coord=decodeCoordinate(action.coord_str);\r\n          if (coord)\r\n          {\r\n          }\r\n        }\r\n        dispatch(action);\r\n      }\r\n  });\r\n}, []);\r\n    // assistantRef.current.on(\"data\", ({ type, character, action }: any) => {\r\n    assistantRef.current.on(\"data\", ({ action }: any) => {\r\n      if (action) {\r\n        dispatch(action);\r\n        // TODO Тест\r\n        if (action.type==='lets_fire')\r\n        {\r\n          let coord=decodeCoordinate(action.coord_str);\r\n          if (coord)\r\n          {\r\n            // Тут он скажет, что попал\r\n            doneNote(\"Test!!!!\");\r\n\r\n        \r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n  }, []);\r\n\r\n  // Здесь была передача текущего состояния в смартап\r\n  // (где оно там используется, я пока не увидел, да и не смотрел)\r\n  useEffect(() => {\r\n    assistantStateRef.current = {\r\n      item_selector: {\r\n        items: appState.notes.map(({ id, title }, index) => ({\r\n          number: index + 1,\r\n          id,\r\n          title,\r\n        })),\r\n      },\r\n    };\r\n  }, [appState]);\r\n  */\r\n\r\n  _renderResult() {\r\n\r\n    //const { game, playerId, winnerId } = this.props;\r\n\r\n    let playerId = 1;\r\n    let winnerId = 2;\r\n\r\n    const message = playerId === winnerId ? 'Yo Ho Ho, victory is yours!' : 'You got wrecked, landlubber!';\r\n    const twitterMessage = playerId === winnerId ? 'Yo Ho Ho, I won a battle at Phoenix Battleship' : 'I got wrecked at Phoenix Battleship';\r\n\r\n    //setDocumentTitle(`${message} · #${game.id}`);\r\n\r\n    return (\r\n      <div id=\"game_result\">\r\n        <header>\r\n        {/*<Logo/>*/}\r\n          <h1>Game over</h1>\r\n          <p>{message}</p>\r\n          <a\r\n            href={`https://twitter.com/intent/tweet?url=https://phoenix-battleship.herokuapp.com&button_hashtag=myelixirstatus&text=${twitterMessage}`}\r\n            className=\"twitter-hashtag-button\"><i className=\"fa fa-twitter\" /> Share result</a>\r\n        </header>\r\n        {/*<Link to=\"/\">Back to home</Link>*/}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _renderOpponentBoard() {\r\n    //const { dispatch, game, gameChannel, playerId, currentTurn, readyForBattle } = this.props;\r\n\r\n    /*\r\n    if (!readyForBattle) return (\r\n        <Instructions\r\n            readyForBattle={readyForBattle}\r\n            playerIsAttacker={playerId === game.attacker}/>\r\n    );\r\n     */\r\n\r\n    //const opponentBoard = this.state.opponent_board_0;\r\n    // а вот через data к ним можно бы обратиться только внутри OpponentBoard\r\n    const remaining_hit_points = this.state.opponent_board.remaining_hit_points;\r\n\r\n    return (\r\n      <div id=\"opponents_board_container\">\r\n        <header>\r\n          <h2>Shooting grid</h2>\r\n        </header>\r\n        <OpponentBoard\r\n          //dispatch={dispatch}\r\n          //gameChannel={gameChannel}\r\n          data={this.state.opponent_board}\r\n          //playerId={playerId}\r\n          //currentTurn={currentTurn}\r\n          //onClickBoard={() => dispatch({ type: \"add_note\", note: \"123\" })}\r\n          onClickBoard={(x:any, y:any) => this.myDispatch({ type: \"lets_fire\", coord_str: codeCoordinate(x,y)})}\r\n        />\r\n        <p>Попаданий до победы: {remaining_hit_points}</p>\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n\r\n  _renderGameContent() {\r\n    if (this.state.gameOver) return this._renderResult();\r\n\r\n    return (\r\n      <section id=\"main_section\">\r\n        {\r\n          <Header\r\n          //game={GameShowView}\r\n          //playerId={playerId}\r\n          //currentTurn={currentTurn}\r\n          >\r\n          </Header>\r\n        }\r\n        <section id=\"boards_container\">\r\n          <div id=\"my_board_container\">\r\n            <header>\r\n              <h2>Your ships</h2>\r\n            </header>\r\n            <MyBoard\r\n              //dispatch={dispatch}\r\n              //gameChannel={gameChannel}\r\n              //selectedShip={selectedShip}\r\n              data={this.state.my_board}\r\n            />\r\n          </div>\r\n          {\r\n            this._renderOpponentBoard()\r\n          }\r\n        </section>\r\n      </section>\r\n    );\r\n\r\n  }\r\n\r\n  // done в оригинале\r\n  //const doneNote = (title: string) => {\r\n  //  assistantRef.current?.sendData({ action: { action_id: 'fireHit', parameters: { title } } });\r\n//};\r\n\r\n\r\nrender() {\r\n  return (\r\n    <AppStyled>\r\n    {/* Используем глобальные react-компоненты один раз */}\r\n    <TypoScale />\r\n    <DocStyles />\r\n    {(() => {\r\n                switch (this.state.character) {\r\n                    case 'sber':\r\n                        return <ThemeBackgroundSber />;\r\n                    case 'eva':\r\n                        return <ThemeBackgroundEva />;\r\n                    case 'joy':\r\n                        return <ThemeBackgroundJoy />;\r\n                    default:\r\n                        return;\r\n                }\r\n            })()}    \r\n    {/*<Theme />*/}\r\n    {/*<Button onClick={() => doneNote(\"Test!\")}>Normal Button</Button>*/}\r\n    <main id=\"game_show\" className=\"view-container\">\r\n      {this._renderGameContent()}\r\n      {/*\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          dispatch({ type: \"add_note\", note });\r\n          setNote(\"\");\r\n        }}\r\n      >\r\n        <input\r\n          className=\"add-note\"\r\n          type=\"text\"\r\n          placeholder=\"Add Note\"\r\n          value={note}\r\n          onChange={({ target: { value } }) => setNote(value)}\r\n          required\r\n          autoFocus\r\n        />\r\n      </form>\r\n      <ul className=\"notes\">\r\n        {appState.notes.map((note, index) => (\r\n          <li className=\"note\" key={note.id}>\r\n            <span>\r\n              <span style={{ fontWeight: \"bold\" }}>{index + 1}. </span>\r\n              <span\r\n                style={{\r\n                  textDecorationLine: note.completed ? \"line-through\" : \"none\",\r\n                }}\r\n              >\r\n                {note.title}\r\n              </span>\r\n            </span>\r\n            <input\r\n              className=\"done-note\"\r\n              type=\"checkbox\"\r\n              checked={note.completed}\r\n              onChange={() => dispatch({ type: \"done_note\", id: note.id })}\r\n            />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      */}\r\n    </main>\r\n    </AppStyled>\r\n  );\r\n}\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}